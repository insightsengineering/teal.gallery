[{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"sample-app-source-code","dir":"Articles","previous_headings":"","what":"Sample app source code","title":"Sample Apps Source Code","text":"Source code available sample apps gallery available .","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"basic-teal","dir":"Articles","previous_headings":"Sample app source code","what":"basic-teal","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/basic-teal","code":"library(teal)  app <- init(   data = teal_data(     dataset(\"IRIS\", iris),     dataset(\"MTCARS\", mtcars)   ),   modules = modules(example_module()),   header = \"My first teal application\" )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"early-dev","dir":"Articles","previous_headings":"Sample app source code","what":"early-dev","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/early-dev","code":"library(scda) library(scda.2022) library(dplyr) library(teal.modules.clinical) library(teal.modules.general) library(teal.osprey) library(nestcolor) library(sparkline)  options(shiny.useragg = FALSE)  ADSL <- synthetic_cdisc_data(\"latest\")$adsl  # derive ADSL treatment duration adsl_labels <- formatters::var_labels(ADSL, fill = FALSE) ADSL <- ADSL %>%   mutate(     TRTDURD = as.numeric(as.Date(TRTEDTM) - as.Date(TRTSDTM)) + 1,     DTHFL = ifelse(!is.na(DTHDT), \"Y\", NA),     EOSSTT = factor(EOSSTT, levels = c(\"COMPLETED\", \"ONGOING\", \"DISCONTINUED\"))   ) %>%   formatters::var_relabel(     TRTDURD = \"Treatment Duration in Days\",     DTHFL = \"Death Flag\",     DCSREAS = \"Reason for Study Discontinuation\",     EOSSTT = \"End of Study Status\"   ) %>%   droplevels() formatters::var_labels(ADSL)[c(names(adsl_labels))] <- adsl_labels  ADAE <- synthetic_cdisc_data(\"latest\")$adae  # derive common flags for AEs adae_labels <- formatters::var_labels(ADAE, fill = FALSE) ADAE <- ADAE %>%   mutate_at(c(\"AESOC\", \"AEBODSYS\", \"AEHLT\", \"AEDECOD\", \"AETERM\", \"AELLT\"), as.character) %>%   mutate(     RELFL = ifelse(AEREL == \"Y\", \"Y\", \"N\"),     CTC35FL = ifelse(AETOXGR %in% c(\"3\", \"4\", \"5\"), \"Y\", \"N\"),     SERFL = ifelse(AESER == \"Y\", \"Y\", \"N\"),     RELSERFL = ifelse(AEREL == \"Y\" & AESER == \"Y\", \"Y\", \"N\"),     AEREL1 = (AEREL == \"Y\" & ACTARM == \"A: Drug X\"),     AEREL2 = (AEREL == \"Y\" & ACTARM == \"B: Placebo\"),     ASTDT = as.Date(ASTDTM),     AENDT = as.Date(AENDTM)   ) %>%   formatters::var_relabel(     RELFL = \"Related AE\",     CTC35FL = \"Grade >=3 AE\",     SERFL = \"Serious AE\",     RELSERFL = \"Related Serious AE\",     AEREL1 = \"AE related to A: Drug X\",     AEREL2 = \"AE related to B: Placebo\",     ASTDT = \"Analysis Start Date\",     AENDT = \"Analysis End Date\",     AESOC = \"Primary System Organ Class\",     AEBODSYS = \"Body System or Organ Class\",     AEHLT = \"High Level Term\",     AEDECOD = \"Dictionary-Derived Term\",     AETERM = \"Reported Term for the Adverse Event\",     AELLT = \"Lowest Level Term\"   )  ADCM <- synthetic_cdisc_data(\"latest\")$adcm  # process ADCM ADCM <- ADCM %>%   mutate(     ASTDT = as.Date(ASTDTM),     AENDT = as.Date(AENDTM)   ) %>%   formatters::var_relabel(     ASTDT = \"Analysis Start Date\",     AENDT = \"Analysis End Date\"   )  ADEX <- synthetic_cdisc_data(\"latest\")$adex  # process ADEX ADEX <- ADEX %>%   mutate(     ASTDT = as.Date(ASTDTM),     AENDT = as.Date(AENDTM)   ) %>%   formatters::var_relabel(     ASTDT = \"Analysis Start Date\",     AENDT = \"Analysis End Date\"   )  ADTR <- synthetic_cdisc_data(\"latest\")$adtr  # process ADTR adtr_labels <- formatters::var_labels(ADTR, fill = FALSE) ADTR <- ADTR %>%   mutate(     PCHG = ifelse(AVISIT == \"BASELINE\", 0, PCHG),     CHG = ifelse(AVISIT == \"BASELINE\", 0, CHG),     AVAL = ifelse(AVISIT == \"BASELINE\", BASE, AVAL),     AVALC = ifelse(AVISIT == \"BASELINE\", as.character(BASE), AVALC)   ) %>%   filter(AVISIT != \"SCREENING\") formatters::var_labels(ADTR) <- adtr_labels  ADTRWF <- ADTR %>%   filter(AVISIT != \"BASELINE\") formatters::var_labels(ADTRWF) <- formatters::var_labels(ADTR, fill = FALSE)   # process ADRS ADRSSWIM <- synthetic_cdisc_data(\"latest\")$adrs %>%   filter(PARAMCD == \"OVRINV\") %>%   arrange(USUBJID)  ADRS <- synthetic_cdisc_data(\"latest\")$adrs adrs_labels <- formatters::var_labels(ADRS, fill = FALSE) ADRS <- ADRS %>%   filter(PARAMCD %in% c(\"BESRSPI\", \"INVET\")) %>%   mutate(ADT = as.Date(ADTM)) %>%   droplevels() formatters::var_labels(ADRS) <- c(adrs_labels, \"Analysis Date\")  ADLB <- synthetic_cdisc_data(\"latest\")$adlb  # process ADLB ADLB <- ADLB %>%   mutate(     ADT = as.Date(ADTM),     LBSTRESN = as.numeric(LBSTRESC)   ) %>%   formatters::var_relabel(     ADT = \"Analysis Date\",     LBSTRESN = \"Numeric Result/Finding in Standard Units\"   )  ## Reusable Configuration For Modules arm_vars <- c(\"ARMCD\", \"ARM\", \"ACTARMCD\", \"ACTARM\", \"EOSSTT\") aeflag_vars <- c(\"RELFL\", \"CTC35FL\", \"SERFL\", \"RELSERFL\") facet_vars <- c(\"SEX\", \"BMRKR2\", \"RACE\", \"STRATA1\", \"STRATA2\") ds_vars <- c(\"EOSSTT\", \"DCSREAS\")  cs_arm_var <- choices_selected(   choices = variable_choices(ADSL, subset = arm_vars),   selected = \"ARM\" )  cs_aeflag_var <- choices_selected(   choices = variable_choices(ADAE, subset = aeflag_vars),   selected = NULL )  cs_aeterm_var <- choices_selected(   choices = variable_choices(ADAE, subset = c(\"AEDECOD\", \"AETERM\", \"AELLT\", \"AESOC\", \"AEBODSYS\", \"AEHLT\")),   selected = \"AEDECOD\" )  cs_facet_var <- choices_selected(   choices = variable_choices(ADSL, subset = facet_vars),   selected = NULL )  cs_ds_var <- choices_selected(   choices = variable_choices(ADSL, ds_vars),   selected = ds_vars )  cs_bar_var <- choices_selected(   choices = variable_choices(ADSL, c(\"TRTDURD\", \"EOSDY\")),   selected = \"TRTDURD\" )  cs_paramcd_rsp <- choices_selected(   choices = value_choices(ADRS, \"PARAMCD\", \"PARAM\", subset = c(\"BESRSPI\", \"INVET\")),   selected = \"BESRSPI\" )  cs_paramcd_tr <- choices_selected(   choices = value_choices(ADTR, \"PARAMCD\", \"PARAM\", subset = \"SLDINV\"),   selected = \"SLDINV\" )  adsl_labels <- formatters::var_labels(ADSL) fact_vars_asl <- names(Filter(isTRUE, sapply(ADSL, is.factor)))  date_vars_asl <- names(ADSL)[vapply(ADSL, function(x) inherits(x, c(\"Date\", \"POSIXct\", \"POSIXlt\")), logical(1))] demog_vars_asl <- names(ADSL)[!(names(ADSL) %in% c(\"USUBJID\", \"STUDYID\", date_vars_asl))]  ## Create front page for app ---- srv_front_page <- function(id, datasets, dataname) {   moduleServer(id, function(input, output, session) {     observeEvent(input$show_teal_setup_code, {       showModal(modalDialog(         title = \"R Code Used to Setup the Current Teal Shiny App\",         tags$div(           actionButton(\"copyRCode\", \"Copy to Clipboard\", `data-clipboard-target` = \"#r_code\"),           style = \"padding-bottom: 15px;\"         ),         tags$div(tags$pre(id = \"r_code\", paste(readLines(\"app.R\"), collapse = \"\\n\"))),         footer = tagList(           actionButton(\"copyRCode\", \"Copy to Clipboard\", `data-clipboard-target` = \"#r_code\"),           modalButton(\"Dismiss\")         ),         size = \"l\",         easyClose = TRUE       ))     })   }) }  ui_front_page <- function(id, ...) {   ns <- NS(id)   tagList(     tags$p(       \"The\", tags$code(\"ADSL\"), \",\", tags$code(\"ADAE\"), \",\", tags$code(\"ADRS\"), \", and \",       tags$code(\"ADTR\"), \"data in this example app has been created using random number generators.\"     ),     tags$p(\"\", style = \"height: 20px;\"),     tags$p(       \"This sample app mainly covers \", tags$code(\"teal.osprey\"), \" modules.\",       \"If additional safety and efficacy modules are needed,\",       \"please refer to the safety and efficacy sample app templates\",       \"to add additional modules.\"     ),     tags$p(\"\", style = \"height: 15px;\"),     tags$p(paste(       \"These apps are relatively easily setup for a study.\",       \"That is, the teal framework is optimized to setup one\",       \"Shiny App per analysis purpose. For example, the code to setup\",       \"the current teal app can be requested with the following button:\"     )),     tags$p(\"\", style = \"height: 15px;\"),     actionButton(ns(\"show_teal_setup_code\"), \"Show Teal Shiny App Setup R-Code\", icon = icon(\"fas fa-align-justify\")),     tags$p(\"\", style = \"height: 20px;\"),     tags$div(       tags$p(         \"This is shiny app was brought to you by ED SPA. For more information please contact NEST SME team.\"       )     )   ) }  # create cdisc_dataset objects to pass into app  adsl <- cdisc_dataset(   dataname = \"ADSL\",   x = ADSL,   code = 'ADSL <- synthetic_cdisc_data(\"latest\")$adsl           adsl_labels <- formatters::var_labels(ADSL, fill = FALSE)           ADSL <- ADSL %>%               mutate(                 TRTDURD = as.numeric(as.Date(TRTEDTM) - as.Date(TRTSDTM)) + 1,                 DTHFL = ifelse(!is.na(DTHDT), \"Y\", NA),                 EOSSTT = factor(EOSSTT, levels = c(\"COMPLETED\", \"ONGOING\", \"DISCONTINUED\"))               ) %>%               formatters::var_relabel(                 TRTDURD = \"Treatment Duration in Days\",                 DTHFL = \"Death Flag\",                 DCSREAS = \"Reason for Study Discontinuation\",                 EOSSTT = \"End of Study Status\"               ) %>%               droplevels()           formatters::var_labels(ADSL)[c(names(adsl_labels))] <- adsl_labels' )  adae <- cdisc_dataset(   dataname = \"ADAE\",   x = ADAE,   keys = c(\"STUDYID\", \"USUBJID\", \"AETERM\", \"AESEQ\"),   code = 'ADAE <- synthetic_cdisc_data(\"latest\")$adae           # derive common flags for AEs           ADAE <- ADAE %>%             mutate_at(               c(\"AESOC\", \"AEBODSYS\", \"AEHLT\", \"AEDECOD\", \"AETERM\", \"AELLT\"),               as.character             ) %>%             mutate(               RELFL = ifelse(AEREL == \"Y\", \"Y\", \"N\"),               CTC35FL = ifelse(AETOXGR %in% c(\"3\", \"4\", \"5\"), \"Y\", \"N\"),               SERFL = ifelse(AESER == \"Y\", \"Y\", \"N\"),               RELSERFL = ifelse(AEREL == \"Y\" & AESER == \"Y\", \"Y\", \"N\"),               AEREL1 = (AEREL == \"Y\" & ACTARM == \"A: Drug X\"),               AEREL2 = (AEREL == \"Y\" & ACTARM == \"B: Placebo\"),               ASTDT = as.Date(ASTDTM),               AENDT = as.Date(AENDTM)             ) %>%             formatters::var_relabel(               RELFL = \"Related AE\",               CTC35FL = \"Grade >=3 AE\",               SERFL = \"Serious AE\",               RELSERFL = \"Related Serious AE\",               AEREL1 = \"AE related to A: Drug X\",               AEREL2 = \"AE related to B: Placebo\",               ASTDT = \"Analysis Start Date\",               AENDT = \"Analysis End Date\",               AESOC = \"Primary System Organ Class\",               AEBODSYS = \"Body System or Organ Class\",               AEHLT = \"High Level Term\",               AEDECOD = \"Dictionary-Derived Term\",               AETERM = \"Reported Term for the Adverse Event\",               AELLT = \"Lowest Level Term\"             )',   vars = list(ADSL = adsl) )  adcm <- cdisc_dataset(   dataname = \"ADCM\",   x = ADCM,   code = 'ADCM <- synthetic_cdisc_data(\"latest\")$adcm           ADCM <- ADCM %>%             mutate(               ASTDT = as.Date(ASTDTM),               AENDT = as.Date(AENDTM)             ) %>%             formatters::var_relabel(               ASTDT = \"Analysis Start Date\",               AENDT = \"Analysis End Date\"             )',   vars = list(ADSL = adsl) )  adex <- cdisc_dataset(   dataname = \"ADEX\",   x = ADEX,   code = 'ADEX <- synthetic_cdisc_data(\"latest\")$adex           ADEX <- ADEX %>%             mutate(               ASTDT = as.Date(ASTDTM),               AENDT = as.Date(AENDTM)             ) %>%             formatters::var_relabel(               ASTDT = \"Analysis Start Date\",               AENDT = \"Analysis End Date\"             )',   vars = list(ADSL = adsl) )  adtr <- cdisc_dataset(   dataname = \"ADTR\",   x = ADTR,   keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\"),   code = 'ADTR <- synthetic_cdisc_data(\"latest\")$adtr           adtr_labels <- formatters::var_labels(ADTR, fill = FALSE)           ADTR <- ADTR %>%             mutate(               PCHG = ifelse(AVISIT == \"BASELINE\", 0, PCHG),               CHG = ifelse(AVISIT == \"BASELINE\", 0, CHG),               AVAL = ifelse(AVISIT == \"BASELINE\", BASE, AVAL),               AVALC = ifelse(AVISIT == \"BASELINE\", as.character(BASE), AVALC)             ) %>%             dplyr::filter(AVISIT != \"SCREENING\")           formatters::var_labels(ADTR) <- adtr_labels',   var = list(ADSL = adsl) )  adtrwf <- cdisc_dataset(   dataname = \"ADTRWF\",   x = ADTRWF,   keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\"),   code = 'ADTRWF <- ADTR %>%             dplyr::filter(AVISIT != \"BASELINE\")           formatters::var_labels(ADTRWF) <- formatters::var_labels(ADTR, fill = FALSE)',   vars = list(ADTR = adtr) )  adrs <- cdisc_dataset(   dataname = \"ADRS\",   x = ADRS,   code = 'ADRS <- synthetic_cdisc_data(\"latest\")$adrs           adrs_labels <- formatters::var_labels(ADRS, fill = FALSE)           ADRS <- ADRS %>%             filter(PARAMCD %in% c(\"BESRSPI\", \"INVET\"))  %>%             mutate(ADT = as.Date(ADTM)) %>%             droplevels()         formatters::var_labels(ADRS) <- c(adrs_labels, \"Analysis Date\")',   vars = list(ADSL = adsl) )  adrsswim <- cdisc_dataset(   dataname = \"ADRSSWIM\",   x = ADRSSWIM,   keys = c(\"STUDYID\", \"USUBJID\", \"PARAMCD\", \"AVISIT\"),   code = 'ADRSSWIM <- synthetic_cdisc_data(\"latest\")$adrs %>%             dplyr::filter(PARAMCD == \"OVRINV\") %>%             arrange(USUBJID)',   vars = list(ADSL = adsl) )  adlb <- cdisc_dataset(   dataname = \"ADLB\",   x = ADLB,   code = 'ADLB <- synthetic_cdisc_data(\"latest\")$adlb           ADLB <- ADLB %>%             mutate(               ADT = as.Date(ADTM),               LBSTRESN = as.numeric(LBSTRESC)             ) %>%             formatters::var_relabel(               ADT = \"Analysis Date\",               LBSTRESN = \"Numeric Result/Finding in Standard Units\"             )',   vars = list(ADSL = adsl) )  ## Setup App app <- teal::init(   data = cdisc_data(     adsl,     adae,     adex,     adcm,     adtr,     adtrwf,     adrs,     adrsswim,     adlb,     check = TRUE   ),   modules = modules(     module(       label = \"App Information\",       server = srv_front_page,       ui = ui_front_page,       filters = \"all\"     ),     tm_data_table(\"Data Table\"),     tm_variable_browser(\"Variable Browser\"),     modules(       label = \"Adverse Events\",       tm_g_events_term_id(         label = \"Common AE Plot\",         dataname = \"ADAE\",         term_var = cs_aeterm_var,         arm_var = cs_arm_var,         plot_height = c(800, 200, 2000)       ),       tm_g_ae_oview(         label = \"AE Overview Plot\",         dataname = \"ADAE\",         arm_var = cs_arm_var,         flag_var_anl = choices_selected(           choices = variable_choices(ADAE, c(\"AEREL1\", \"AEREL2\")),           selected = NULL         ),         plot_height = c(800, 200, 2000)       ),       tm_g_butterfly(         label = \"Butterfly Plot\",         dataname = \"ADAE\",         filter_var = cs_aeflag_var,         right_var = cs_arm_var,         left_var = cs_arm_var,         category_var = choices_selected(           choices = variable_choices(ADAE, subset = c(\"AEDECOD\", \"AETERM\", \"AESOC\", \"AEBODSYS\")),           selected = \"AEBODSYS\"         ),         color_by_var = choices_selected(           choices = c(variable_choices(ADAE, \"AETOXGR\"), \"None\"),           selected = \"AETOXGR\"         ),         count_by_var = choices_selected(           choices = c(\"# of patients\", \"# of AEs\"),           selected = \"# of patients\"         ),         facet_var = cs_facet_var,         sort_by_var = choices_selected(choices = c(\"count\", \"alphabetical\"), selected = \"count\"),         legend_on = TRUE,         plot_height = c(600, 200, 2000)       ),       tm_g_ae_sub(         label = \"AE by Subgroup\",         dataname = \"ADAE\",         arm_var = choices_selected(           selected = \"ACTARMCD\",           choices = c(\"ACTARM\", \"ACTARMCD\")         ),         group_var = choices_selected(           selected = c(\"SEX\", \"REGION1\", \"RACE\"),           choices = c(\"SEX\", \"REGION1\", \"RACE\")         ),         plot_height = c(600, 200, 2000)       )     ),     tm_t_summary(       label = \"Disposition Table\",       dataname = \"ADSL\",       arm_var = cs_arm_var,       summarize_vars = cs_ds_var,       useNA = \"no\"     ),     tm_g_spiderplot(       label = \"Spider plot\",       dataname = \"ADTR\",       paramcd = cs_paramcd_tr,       x_var = choices_selected(choices = variable_choices(ADTR, \"ADY\"), selected = \"ADY\"),       y_var = choices_selected(         choices = variable_choices(ADTR, c(\"PCHG\", \"CHG\", \"AVAL\")),         selected = \"PCHG\"       ),       marker_var = choices_selected(         choices = variable_choices(ADSL, c(\"SEX\", \"RACE\")),         selected = \"SEX\"       ),       line_colorby_var = cs_arm_var,       xfacet_var = cs_facet_var,       yfacet_var = cs_facet_var,       vref_line = \"42\",       href_line = \"-20, 0, 30\",       anno_txt_var = TRUE,       legend_on = FALSE,       plot_height = c(600, 200, 2000)     ),     tm_g_swimlane(       label = \"Swimlane Plot\",       dataname = \"ADRSSWIM\",       bar_var = cs_bar_var,       bar_color_var = choices_selected(         choices = variable_choices(ADSL, fact_vars_asl),         selected = \"EOSSTT\"       ),       sort_var = choices_selected(         choices = variable_choices(ADSL, c(arm_vars, \"TRTDURD\")),         selected = arm_vars[1]       ),       marker_pos_var = choices_selected(         choices = c(variable_choices(ADRS, \"ADY\")),         selected = \"ADY\"       ),       marker_shape_var = choices_selected(c(variable_choices(ADRS, c(\"AVALC\", \"AVISIT\"))),         selected = \"AVALC\"       ),       marker_shape_opt = c(\"CR\" = 16, \"PR\" = 17, \"SD\" = 18, \"PD\" = 15, \"Death\" = 8),       marker_color_var = choices_selected(         choices = c(variable_choices(ADRS, c(\"AVALC\", \"AVISIT\"))),         selected = \"AVALC\"       ),       marker_color_opt = c(         \"CR\" = \"green\", \"PR\" = \"blue\", \"SD\" = \"goldenrod\",         \"PD\" = \"red\", \"Death\" = \"black\"       ),       vref_line = c(30, 60),       anno_txt_var = choices_selected(         choices = variable_choices(ADSL, intersect(arm_vars, fact_vars_asl)),         selected = arm_vars[1]       )     ),     tm_g_waterfall(       label = \"Waterfall Plot\",       dataname_tr = \"ADTRWF\",       dataname_rs = \"ADRS\",       bar_paramcd = cs_paramcd_tr,       bar_var = choices_selected(variable_choices(ADTRWF, \"PCHG\"), \"PCHG\"),       bar_color_var = choices_selected(variable_choices(ADSL, fact_vars_asl), \"ARMCD\"),       sort_var = choices_selected(variable_choices(ADSL, fact_vars_asl), NULL),       add_label_var_sl = choices_selected(variable_choices(ADSL, fact_vars_asl), NULL),       add_label_paramcd_rs = cs_paramcd_rsp,       anno_txt_var_sl = choices_selected(variable_choices(ADSL, fact_vars_asl), NULL),       anno_txt_paramcd_rs = cs_paramcd_rsp,       facet_var = cs_facet_var,       ytick_at = 20,       href_line = \"-30, 20\",       gap_point_val = NULL,       plot_height = c(1200L, 400L, 5000L)     ),     tm_g_patient_profile(       label = \"Patient Profile Plot\",       patient_id = choices_selected(         choices = unique(ADSL$USUBJID),         selected = unique(ADSL$USUBJID)[1]       ),       sl_dataname = \"ADSL\",       ex_dataname = \"ADEX\",       ae_dataname = \"ADAE\",       rs_dataname = \"ADRS\",       cm_dataname = \"ADCM\",       lb_dataname = \"ADLB\",       sl_start_date = choices_selected(         selected = \"TRTSDTM\",         choices = variable_choices(ADSL, subset = c(\"TRTSDTM\", \"RANDDT\"))       ),       ex_var = choices_selected(         selected = \"PARCAT2\",         choices = variable_choices(ADEX, \"PARCAT2\")       ),       ae_var = choices_selected(         selected = \"AEDECOD\",         choices = variable_choices(ADAE, c(\"AEDECOD\", \"AESOC\"))       ),       ae_line_col_var = choices_selected(         selected = \"AESER\",         choices = variable_choices(ADAE, c(\"AESER\", \"AEREL\"))       ),       ae_line_col_opt = c(\"Y\" = \"red\", \"N\" = \"blue\"),       rs_var = choices_selected(         selected = \"PARAMCD\",         choices = variable_choices(ADRS, c(\"PARAMCD\", \"PARAM\"))       ),       cm_var = choices_selected(         selected = \"CMDECOD\",         choices = variable_choices(ADCM, c(\"CMDECOD\", \"CMCAT\"))       ),       lb_var = choices_selected(         selected = \"PARAMCD\",         choices = variable_choices(ADLB, c(\"PARAMCD\", \"PARAM\"))       ),       x_limit = \"-28, 750\",       plot_height = c(1200, 400, 5000)     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(\"Demo ED Onco teal app with random ADaM data\", tags$span(\"ED SPA\", class = \"pull-right\"))   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\") )  ## Start Teal Shiny App ---- shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"efficacy","dir":"Articles","previous_headings":"Sample app source code","what":"efficacy","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/efficacy","code":"library(dplyr) library(scda) library(scda.2022) library(teal.modules.general) library(teal.modules.clinical) library(nestcolor) library(sparkline)  options(shiny.useragg = FALSE)  # code> ## Generate Data ADSL <- synthetic_cdisc_data(\"latest\")$adsl adsl_labels <- formatters::var_labels(ADSL, fill = FALSE)  char_vars_asl <- names(Filter(isTRUE, sapply(ADSL, is.character)))  adsl_labels <- c(   adsl_labels,   AGEGR1 = \"Age Group\" ) ADSL <- ADSL %>%   mutate(     AGEGR1 = factor(case_when(       AGE < 45 ~ \"<45\",       AGE >= 45 ~ \">=45\"     ))   ) %>%   mutate_at(char_vars_asl, factor)  formatters::var_labels(ADSL) <- adsl_labels  ADTTE <- synthetic_cdisc_data(\"latest\")$adtte  ADRS <- synthetic_cdisc_data(\"latest\")$adrs adrs_labels <- formatters::var_labels(ADRS, fill = FALSE) ADRS <- filter(ADRS, PARAMCD == \"BESRSPI\" | AVISIT == \"FOLLOW UP\") formatters::var_labels(ADRS) <- adrs_labels  ADQS <- synthetic_cdisc_data(\"latest\")$adqs adqs_labels <- formatters::var_labels(ADQS, fill = FALSE) ADQS <- ADQS %>%   filter(ABLFL != \"Y\" & ABLFL2 != \"Y\") %>%   filter(AVISIT %in% c(\"WEEK 1 DAY 8\", \"WEEK 2 DAY 15\", \"WEEK 3 DAY 22\")) %>%   mutate(     AVISIT = as.factor(AVISIT),     AVISITN = rank(AVISITN) %>%       as.factor() %>%       as.numeric() %>%       as.factor()   ) formatters::var_labels(ADQS) <- adqs_labels  # <code  ## Reusable Configuration For Modules arm_vars <- c(\"ARMCD\", \"ARM\") strata_vars <- c(\"STRATA1\", \"STRATA2\") facet_vars <- c(\"AGEGR1\", \"BMRKR2\", \"SEX\", \"COUNTRY\") cov_vars <- c(\"AGE\", \"SEX\", \"BMRKR1\", \"BMRKR2\", \"REGION1\") visit_vars <- c(\"AVISIT\", \"AVISITN\")  cs_arm_var <- choices_selected(   choices = variable_choices(ADSL, subset = arm_vars),   selected = \"ARM\" )  cs_strata_var <- choices_selected(   choices = variable_choices(ADSL, subset = strata_vars),   selected = \"STRATA1\" )  cs_facet_var <- choices_selected(   choices = variable_choices(ADSL, subset = facet_vars),   selected = \"AGEGR1\" )  cs_cov_var <- choices_selected(   choices = variable_choices(ADSL, subset = cov_vars),   selected = \"AGE\" )  cs_paramcd_tte <- choices_selected(   choices = value_choices(ADTTE, \"PARAMCD\", \"PARAM\"),   selected = \"OS\" )  cs_paramcd_rsp <- choices_selected(   choices = value_choices(ADRS, \"PARAMCD\", \"PARAM\"),   selected = \"BESRSPI\" )  cs_paramcd_qs <- choices_selected(   choices = value_choices(ADQS, \"PARAMCD\", \"PARAM\"),   selected = \"FKSI-FWB\" )  cs_visit_var_qs <- choices_selected(   choices = variable_choices(ADQS, subset = visit_vars),   selected = \"AVISIT\" )  fact_vars_asl <- names(Filter(isTRUE, sapply(ADSL, is.factor))) fact_vars_asl_orig <- fact_vars_asl[!fact_vars_asl %in% char_vars_asl]  date_vars_asl <- names(ADSL)[vapply(ADSL, function(x) inherits(x, c(\"Date\", \"POSIXct\", \"POSIXlt\")), logical(1))] demog_vars_asl <- names(ADSL)[!(names(ADSL) %in% c(\"USUBJID\", \"STUDYID\", date_vars_asl))]  # reference & comparison arm selection when switching the arm variable # ARMCD is given in a delayed fashion using value choices and # ARM is given with the ref and comp levels supplied explicitly arm_ref_comp <- list(   ARMCD = list(     ref = value_choices(\"ADSL\", var_choices = \"ARMCD\", var_label = \"ARM\", subset = \"ARM A\"),     comp = value_choices(\"ADSL\", var_choices = \"ARMCD\", var_label = \"ARM\", subset = c(\"ARM B\", \"ARM C\"))   ),   ARM = list(ref = \"A: Drug X\", comp = c(\"B: Placebo\", \"C: Combination\")) )  ## Setup App app <- init(   data = cdisc_data(     cdisc_dataset(\"ADSL\", ADSL,       code = 'ADSL <- synthetic_cdisc_data(\"latest\")$adsl                                         adsl_labels <- formatters::var_labels(ADSL, fill = FALSE)                                         adsl_labels <- c(adsl_labels,                                           AGEGR1 = \"Age Group\"                                         )                                         ADSL <- ADSL %>% mutate(                                           AGEGR1 = factor(case_when(                                             AGE < 45 ~ \"<45\",                                             AGE >= 45 ~ \">=45\"                                           ))                                         ) %>%                                         mutate_at(char_vars_asl, factor)                                         formatters::var_labels(ADSL) <- adsl_labels',       vars = list(char_vars_asl = char_vars_asl)     ),     cdisc_dataset(\"ADRS\", ADRS, code = 'ADRS <- synthetic_cdisc_data(\"latest\")$adrs                                         adrs_labels <- formatters::var_labels(ADRS, fill = FALSE)                                         ADRS <- filter(ADRS, PARAMCD == \"BESRSPI\" | AVISIT == \"FOLLOW UP\")                                         formatters::var_labels(ADRS) <- adrs_labels'),     cdisc_dataset(\"ADTTE\", ADTTE, code = \"ADTTE <- synthetic_cdisc_data(\\\"latest\\\")$adtte\"),     cdisc_dataset(\"ADQS\", ADQS, code = 'ADQS <- synthetic_cdisc_data(\"latest\")$adqs                                         adqs_labels <- formatters::var_labels(ADQS, fill = FALSE)                                         ADQS <- ADQS %>%                                           filter(ABLFL != \"Y\" & ABLFL2 != \"Y\") %>%                                           filter(AVISIT %in% c(\"WEEK 1 DAY 8\", \"WEEK 2 DAY 15\", \"WEEK 3 DAY 22\")) %>%                                           mutate(                                             AVISIT = as.factor(AVISIT),                                             AVISITN = rank(AVISITN) %>%                                               as.factor() %>%                                               as.numeric() %>%                                               as.factor()                                           )                                         formatters::var_labels(ADQS) <- adqs_labels')   ),   modules = modules(     tm_front_page(       label = \"Study Information\",       header_text = c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),       tables = list(`NEST packages used` = data.frame(Packages = c(\"teal.modules.general\", \"teal.modules.clinical\", \"scda\", \"scda.2022\")))     ),     tm_data_table(\"Data Table\"),     tm_variable_browser(\"Variable Browser\"),     tm_t_summary(       label = \"Demographic Table\",       dataname = \"ADSL\",       arm_var = cs_arm_var,       summarize_vars = choices_selected(         choices = variable_choices(ADSL, demog_vars_asl),         selected = c(\"SEX\", \"AGE\", \"RACE\")       )     ),     modules(       label = \"Forest Plots\",       tm_g_forest_tte(         label = \"Survival Forest Plot\",         dataname = \"ADTTE\",         arm_var = cs_arm_var,         strata_var = cs_strata_var,         subgroup_var = cs_facet_var,         paramcd = cs_paramcd_tte,         plot_height = c(800L, 200L, 4000L)       ),       tm_g_forest_rsp(         label = \"Response Forest Plot\",         dataname = \"ADRS\",         arm_var = cs_arm_var,         strata_var = cs_strata_var,         subgroup_var = cs_facet_var,         paramcd = cs_paramcd_rsp,         plot_height = c(800L, 200L, 4000L)       )     ),     tm_g_km(       label = \"Kaplan Meier Plot\",       dataname = \"ADTTE\",       arm_var = cs_arm_var,       arm_ref_comp = arm_ref_comp,       paramcd = cs_paramcd_tte,       facet_var = cs_facet_var,       strata_var = cs_strata_var,       plot_height = c(1800L, 200L, 4000L)     ),     tm_t_binary_outcome(       label = \"Response Table\",       dataname = \"ADRS\",       arm_var = cs_arm_var,       arm_ref_comp = arm_ref_comp,       paramcd = cs_paramcd_rsp,       strata_var = cs_strata_var,       rsp_table = TRUE     ),     tm_t_tte(       label = \"Time To Event Table\",       dataname = \"ADTTE\",       arm_var = cs_arm_var,       paramcd = cs_paramcd_tte,       strata_var = cs_strata_var,       time_points = choices_selected(c(182, 365, 547), 182),       event_desc_var = choices_selected(         choices = variable_choices(\"ADTTE\", \"EVNTDESC\"),         selected = \"EVNTDESC\",         fixed = TRUE       )     ),     tm_t_crosstable(       \"Cross Table\",       x = data_extract_spec(         dataname = \"ADSL\",         select = select_spec(           choices = variable_choices(ADSL, fact_vars_asl_orig),           selected = fact_vars_asl_orig[1]         )       ),       y = data_extract_spec(         dataname = \"ADSL\",         select = select_spec(           choices = variable_choices(ADSL, fact_vars_asl_orig),           selected = fact_vars_asl_orig[4]         )       )     ),     tm_t_coxreg(       label = \"Cox Reg\",       dataname = \"ADTTE\",       arm_var = cs_arm_var,       arm_ref_comp = arm_ref_comp,       paramcd = cs_paramcd_tte,       strata_var = cs_strata_var,       cov_var = cs_cov_var     ),     tm_t_logistic(       label = \"Logistic Reg\",       dataname = \"ADRS\",       arm_var = cs_arm_var,       arm_ref_comp = NULL,       paramcd = cs_paramcd_rsp,       cov_var = cs_cov_var     ),     tm_a_mmrm(       label = \"MMRM\",       dataname = \"ADQS\",       aval_var = choices_selected(c(\"AVAL\", \"CHG\"), \"AVAL\"),       id_var = choices_selected(c(\"USUBJID\", \"SUBJID\"), \"USUBJID\"),       arm_var = cs_arm_var,       visit_var = cs_visit_var_qs,       arm_ref_comp = arm_ref_comp,       paramcd = cs_paramcd_qs,       cov_var = choices_selected(c(\"BASE\", \"AGE\", \"SEX\", \"BASE:AVISIT\"), NULL),       conf_level = choices_selected(c(0.95, 0.9, 0.8), 0.95)     ),     tm_t_binary_outcome(       label = \"Binary Response\",       dataname = \"ADRS\",       arm_var = cs_arm_var,       paramcd = cs_paramcd_rsp,       strata_var = cs_strata_var     ),     tm_t_ancova(       label = \"ANCOVA\",       dataname = \"ADQS\",       avisit = choices_selected(value_choices(ADQS, \"AVISIT\"), \"WEEK 1 DAY 8\"),       arm_var = cs_arm_var,       arm_ref_comp = arm_ref_comp,       aval_var = choices_selected(variable_choices(ADQS, c(\"AVAL\", \"CHG\", \"PCHG\")), \"CHG\"),       cov_var = choices_selected(variable_choices(ADQS, c(\"BASE\", \"STRATA1\", \"SEX\")), \"STRATA1\"),       paramcd = cs_paramcd_qs     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(\"Example App with teal.modules.clinical modules\", tags$span(\"SPA\", class = \"pull-right\"))   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\") )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"exploratory","dir":"Articles","previous_headings":"Sample app source code","what":"exploratory","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/exploratory","code":"options(\"teal.ggplot2_args\" = teal.widgets::ggplot2_args(labs = list(caption = \"NEST PROJECT\")))  library(teal.modules.general) library(scda) library(scda.2022) library(dplyr) library(tidyr) library(nestcolor) library(sparkline) library(ggpmisc)  options(shiny.useragg = FALSE)  # code> ADSL <- synthetic_cdisc_data(\"latest\")$adsl ADRS <- synthetic_cdisc_data(\"latest\")$adrs ADLB <- synthetic_cdisc_data(\"latest\")$adlb  ADLBPCA <- ADLB %>%   select(USUBJID, STUDYID, SEX, ARMCD, AVAL, AVISIT, PARAMCD) %>%   pivot_wider(     values_from = \"AVAL\",     names_from = c(\"PARAMCD\", \"AVISIT\"),     names_sep = \" - \"   )  adsl <- cdisc_dataset(\"ADSL\", ADSL, code = \"ADSL <- synthetic_cdisc_data(\\\"latest\\\")$adsl\") adrs <- cdisc_dataset(\"ADRS\", ADRS, code = \"ADRS <- synthetic_cdisc_data(\\\"latest\\\")$adrs\") adlb <- cdisc_dataset(\"ADLB\", ADLB, code = \"ADLB <- synthetic_cdisc_data(\\\"latest\\\")$adlb\") adlbpca <- cdisc_dataset(   \"ADLBPCA\",   ADLBPCA,   code = 'ADLBPCA <- ADLB %>%     select(USUBJID, STUDYID, SEX, ARMCD, AVAL, AVISIT, PARAMCD) %>%     pivot_wider(values_from = \"AVAL\",                 names_from = c(\"PARAMCD\", \"AVISIT\"),                 names_sep = \" - \")',   keys = c(\"STUDYID\", \"USUBJID\"),   label = \"ADLB reshaped\",   vars = list(ADLB = adlb) ) # <code  adsl_extracted_num <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL),     selected = \"AGE\",     multiple = FALSE,     fixed = FALSE   ) ) adsl_extracted_num2 <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL),     selected = \"BMRKR1\",     multiple = FALSE,     fixed = FALSE   ) ) adsl_extracted_fct <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL),     selected = \"ARMCD\",     multiple = FALSE,     fixed = FALSE   ) ) fact_vars_adsl <- names(Filter(isTRUE, sapply(ADSL, is.factor))) adsl_extracted_fct2 <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL, subset = fact_vars_adsl),     selected = \"STRATA2\",     multiple = FALSE,     fixed = FALSE   ) ) adsl_extracted_fct3 <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL),     selected = \"ARMCD\",     multiple = TRUE,     fixed = FALSE   ) ) numeric_vars_adsl <- names(Filter(isTRUE, sapply(ADSL, is.numeric))) adsl_extracted_numeric <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL, subset = numeric_vars_adsl),     selected = \"BMRKR1\",     multiple = FALSE,     fixed = FALSE   ) ) adsl_extracted_factors <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL, subset = fact_vars_adsl),     selected = NULL,     multiple = FALSE,     fixed = FALSE   ) )  adsl_extracted_multi <- data_extract_spec(   dataname = \"ADSL\",   select = select_spec(     choices = variable_choices(ADSL),     selected = c(\"AGE\", \"BMRKR1\"),     multiple = TRUE,     fixed = FALSE   ) )  adrs_filters <- filter_spec(   vars = \"PARAMCD\",   sep = \" - \",   choices = value_choices(ADRS, \"PARAMCD\", \"PARAM\", c(\"BESRSPI\", \"INVET\")),   selected = \"BESRSPI\",   multiple = FALSE,   label = \"Choose endpoint\" )  adrs_extracted_response <- data_extract_spec(   dataname = \"ADRS\",   filter = adrs_filters,   select = select_spec(     choices = variable_choices(ADRS, c(\"AVALC\", \"AVAL\")),     selected = \"AVALC\",     multiple = FALSE,     fixed = FALSE   ) )  fact_vars_adrs <- names(Filter(isTRUE, sapply(ADRS, is.factor))) adrs_extracted_response_fct <- data_extract_spec(   dataname = \"ADRS\",   filter = adrs_filters,   select = select_spec(     choices = variable_choices(ADRS, subset = fact_vars_adrs),     selected = \"AVALC\",     multiple = FALSE,     fixed = FALSE   ) )  adlb_filter_paramcd <- filter_spec(   vars = \"PARAMCD\",   choices = value_choices(ADLB, \"PARAMCD\", \"PARAM\"),   selected = levels(ADLB$PARAMCD)[1],   multiple = FALSE,   label = \"Select lab:\" ) adlb_filter_paramcd2 <- filter_spec(   vars = \"PARAMCD\",   choices = value_choices(ADLB, \"PARAMCD\", \"PARAM\"),   selected = levels(ADLB$PARAMCD)[2],   multiple = FALSE,   label = \"Select lab:\" ) adlb_filter_visit <- filter_spec(   vars = \"AVISIT\",   choices = levels(ADLB$AVISIT),   selected = levels(ADLB$AVISIT)[1],   multiple = FALSE,   label = \"Select visit:\" ) adlb_extracted_aval <- data_extract_spec(   dataname = \"ADLB\",   select = select_spec(     choices = variable_choices(ADLB, c(\"AVAL\", \"CHG\", \"PCHG\", \"ANRIND\", \"BASE\")),     selected = \"AVAL\",     multiple = FALSE,     fixed = FALSE   ),   filter = list(     adlb_filter_paramcd,     adlb_filter_visit   ) )  numeric_vars_adlbpca <- names(Filter(isTRUE, sapply(ADLBPCA, is.numeric)))  distr_filter_spec <- filter_spec(   vars = choices_selected(     variable_choices(ADSL, fact_vars_adsl),     selected = NULL   ),   multiple = TRUE ) app <- init(   data = cdisc_data(adsl, adrs, adlb, adlbpca),   modules = modules(     tm_front_page(       label = \"Study Information\",       header_text = c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),       tables = list(`NEST packages used` = data.frame(Packages = c(\"teal.modules.general\", \"scda\", \"scda.2022\")))     ),     tm_file_viewer(       label = \"File viewer\",       input_path = list(         png = \"https://www.r-project.org/logo/Rlogo.png\",         Rmd = \"https://raw.githubusercontent.com/tidyverse/dplyr/master/README.Rmd\",         pdf = \"https://cran.r-project.org/web/packages/shinyTree/shinyTree.pdf\",         \"example directory\" = \"./packrat/desc/\"       )     ),     tm_data_table(\"Data Table\"),     tm_variable_browser(\"Variable Browser\"),     tm_missing_data(\"Missing Data\"),     tm_g_distribution(       \"Distribution\",       dist_var = adsl_extracted_numeric,       strata_var = data_extract_spec(         dataname = \"ADSL\",         filter = distr_filter_spec       ),       group_var = data_extract_spec(         dataname = \"ADSL\",         filter = distr_filter_spec       )     ),     tm_outliers(       \"Outliers\",       outlier_var = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, c(\"AVAL\", \"CHG\", \"PCHG\", \"BASE\")),           selected = \"AVAL\",           multiple = FALSE,           fixed = FALSE         )       ),       categorical_var = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, c(\"PARAM\", \"PARAMCD\")),           selected = NULL,           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_g_association(       ref = adsl_extracted_num,       vars = adsl_extracted_fct3     ),     tm_g_bivariate(       x = adsl_extracted_num,       y = adlb_extracted_aval,       row_facet = adsl_extracted_factors,       col_facet = adsl_extracted_factors,       use_density = FALSE,       plot_height = c(600L, 200L, 2000L),       ggtheme = \"gray\"     ),     tm_a_regression(       label = \"Regression\",       response = adsl_extracted_numeric,       regressor = adrs_extracted_response     ),     tm_g_response(       response = adrs_extracted_response_fct,       x = adsl_extracted_fct2,       row_facet = adsl_extracted_factors,       col_facet = adsl_extracted_factors,       coord_flip = FALSE     ),     tm_g_scatterplotmatrix(       label = \"Scatterplot matrix\",       variables = adsl_extracted_multi     ),     tm_g_scatterplot(       \"Scatterplot\",       x = adsl_extracted_num,       y = adsl_extracted_num2,       row_facet = adsl_extracted_factors,       col_facet = adsl_extracted_factors,       color_by = adsl_extracted_factors,       size = 3, alpha = 1,       plot_height = c(600L, 200L, 2000L)     ),     tm_t_crosstable(       \"Table Choices\",       x = adsl_extracted_fct2,       y = adsl_extracted_fct     ),     tm_a_pca(       \"Principal Component Analysis\",       dat = data_extract_spec(         dataname = \"ADLBPCA\",         select = select_spec(           choices = variable_choices(ADLBPCA, numeric_vars_adlbpca),           selected = c(\"ALT - WEEK 5 DAY 36\", \"CRP - WEEK 5 DAY 36\", \"IGA - WEEK 5 DAY 36\"),           multiple = TRUE,           fixed = FALSE,           label = \"Variable\"         ),       ),       plot_height = c(600L, 200L, 2000L),       plot_width = c(600L, 200L, 2000L)     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(\"Example App with teal.modules.general modules\", tags$span(\"SPA\", class = \"pull-right\"))   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\") )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"longitudinal","dir":"Articles","previous_headings":"Sample app source code","what":"longitudinal","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/longitudinal","code":"options(shiny.sanitize.errors = FALSE)  # attach required packages library(magrittr) library(dplyr) library(scda) library(scda.2022) library(stringr) library(teal.goshawk) library(teal.modules.clinical) library(teal.modules.general) library(sparkline)  options(shiny.useragg = FALSE)  # study information: used to label app and in \"Source Data\" module ATYPE <- \"Exploratory\" # define here and in the \"# code >\" section below TA <- \"I2ON\" MOLECULE <- \"Demo Molecule\" INDICATION <- \"Demo Indication\" STUDY <- \"Demo Study\" lead_spa_name <- \"John Doe\" lead_spa_uid <- \"John_Doe\" app_owner_name <- \"John Doe\" app_owner_uid <- \"John_Doe\"  # code>  # expected data are ADSL and ADLB # other data can be included but needs to be added to ADSL or ADLB as appropriate # depending on if the data are SUBJECT LEVEL ANALYSIS DATASET or BASIC DATA STRUCTURE # if for example outcome variables are added to ADSL then do also add them as columns to ADLB # this is needed to be able to use plot splitting by outcome functionality ADSL <- synthetic_cdisc_data(\"latest\")$adsl ADLB <- synthetic_cdisc_data(\"latest\")$adlb  ################################################################################ # BEGIN: SPA Input Required To Modify Values Below To Reflect Study Specifics ################################################################################  # assign LOQ flag symbols: circles for \"N\" and triangles for \"Y\", squares for \"NA\" shape_manual <- c(   \"N\" = 1,   \"Y\" = 2,   \"NA\" = 0 )  # study specific biomarkers of interest to exclude from performing log2 calculation done below # for example if biomarker is already log2 transformed then exclude # value of AVAL will then be assigned to XXXXXL2 variables. e.g. AVALL2 # e.g. if x assay is already log2 transformed then assigns AVAL to AVALL2 exclude_l2 <- c(\"\")  # for example if study specific biomarker represents a CHG value then exclude # value NA is assigned to XXXXXL2. e.g. AVALL2 # e.g. if x assay are CHG values then assigns NA to AVALL2 exclude_chg <- c(\"\")  # the app expects ARM to be the main treatment variable # to use other treatment variables it is easiest to rename to ARM and process as ARM  # convenience function: simply reduces typing effort especially if there are a lot of treatment arms # run once to create treatment mapping code for assigning arm_mapping variable below # this function writes the code framework to the console # copy code lines from console and provide right hand side values as desired # maptrt(df_arm = ADSL$TRT01P, code = \"M\")  # ARM mapping: used to map dose values as ARM values or to abbreviate long treatment values for improved display # \"original ARM value\" = \"displayed treatment value\". # the customized values may be the same value as original if this functionality isn't needed # but the arm_mapping still needs to be defined arm_mapping <- list(   \"A: Drug X\" = \"Drug X 100mg\",   \"C: Combination\" = \"Combination 100mg\",   \"B: Placebo\" = \"Placebo\" )  # for consistency: assign treatment colors to match those used in other outputs. left hand side values need to # match values on right hand side of arm_mapping done above color_manual <- c(   \"Drug X 100mg\" = \"#1e90ff\",   \"Combination 100mg\" = \"#bb9990\",   \"Placebo\" = \"#ffa07a\" )  # convenience function: run once to create treatment ordering code for TRTORD variable below. # this function writes the code framework to the console # copy code lines from console and provide right hand side values as desired. # maptrt(df_arm = ADSL$TRT01P, code = \"O\")  # convenience operator: create an operator that keeps the variable attributes # variable labels often get clobbered and we would like to keep them) `%keep_label%` <- function(lhv, rhv) {   attributes(lhv) <- attributes(rhv)   lhv }  # convenience operator: create an operator that adds a label to newly created or re-processed variables `%make_label%` <- function(lhv, label) {   attr(lhv, \"label\") <- label   lhv }  # post process the ADSL data to subset records per specification ADSL <- ADSL %>%   filter(ITTFL == \"Y\") %>%   # use TRT01P values to order treatment in visualization legend and accompanying summary tables   mutate(     TRTORD = case_when(       TRT01P == \"A: Drug X\" ~ 1,       TRT01P == \"C: Combination\" ~ 2,       TRT01P == \"B: Placebo\" ~ 3,       TRUE ~ as.numeric(NA)     ),     TRTORD = TRTORD %make_label% \"Treatment Order\",     TRT01P = as.character(arm_mapping[match(TRT01P, names(arm_mapping))]),     TRT01P = factor(ARM) %>% reorder(TRTORD),     TRT01P = TRT01P %make_label% \"Planned Treatment for Period 01\"   )  # capture state of variable labels to apply back onto variables after data filtering adsl_labels <- formatters::var_labels(ADSL) date_vars_adsl <- names(ADSL)[vapply(ADSL, function(x) inherits(x, c(\"Date\", \"POSIXct\", \"POSIXlt\")), logical(1))] char_vars_adsl <- names(Filter(isTRUE, sapply(ADSL, is.character)))  # set all character class variables to class factor required by NEST functions ADSL <- ADSL %>%   mutate_at(char_vars_adsl, factor)  # add labels back onto variables var_labels(ADSL) <- c(adsl_labels)  # post process the ADLB data to subset records per specification # goshawk expects the following variables: AVISITCD, AVALU, BASE2, CHG2, LBSTRESC, LOQFL, PCHG2 # AVISITCD is assigned abbreviated values of AVISIT. this allows for more efficient use of plot real estate for the plot itself #   if this is not helpful then simply AVISITCD <- AVISIT # AVISITCDN is assigned intuitive numeric values from AVISITCD. if this is not helpful then simply AVISITCDN <- AVISITN # BASE2 represents screening visit value. if this is not relevant for your study then BASE2 <- NA # CHG2 represents change from screening visit value. if this is not relevant for your study then CHG2 <- NA # PCHG2 represents % change from screening visit value. if this is not relevant for your study then PCHG2 <- NA # if you would like to include screening visit related \"change from ...\" analysis # variables in the analysis variable menu then do the following: #   create BASE2 and assign it AVAL values at screening visit #   create CHG2 and assign it change from screening values #   create PCHG2 and assign it % change from screening values # LBSTRESC is carried forward from SDTM and used for deriving an AVAL value and assigning the LOQFL value #  - expectation is that LBSTRESC LOQ values are \"< x\" or \"> y\" format. #  - value assigned to AVAL is x/2 and y respectively. LOQFL is assigned \"Y\" #  - other LBSTRESC value formats will need to be pre-processed so that AVAL and LOQFL are assigned as desired # LOQFL represents limit of quantitation flag. if this is not relevant for your study then LOQFL <- NA # goshawk expectation is to only keep \"SCREENING\", \"BASELINE\", \"DAY xx\", \"WEEK yy\", \"FOLLOW zz\" type AVISIT values # other values can be adjusted for as well of course but this is study specific pre-processing that needs to be done  # adjust select based on your study specifics ADLB_SUBSET <- ADLB %>%   filter(!is.na(AVAL)) %>%   filter(ITTFL == \"Y\" & toupper(AVISIT) %like any% c(\"SCREEN%\", \"BASE%\", \"%WEEK%\", \"%FOLLOW%\")) %>%   select(c(     \"STUDYID\", \"USUBJID\",     \"ITTFL\",     \"ARM\", \"ARMCD\", \"ACTARM\", \"ACTARMCD\", \"TRT01P\", \"TRT01A\",     \"AVISIT\", \"AVISITN\", \"ADY\",     \"PARAM\", \"PARAMCD\",     \"AVAL\", \"AVALU\", \"BASE\", \"CHG\", \"PCHG\",     \"ANRLO\", \"ANRHI\",     \"LBSTRESC\",     \"SEX\", \"RACE\",     \"LOQFL\"   )) %>%   mutate(     # adjust substr to work with study specific values     AVISITCD = case_when(       toupper(AVISIT) == \"SCREENING\" ~ \"SCR\",       toupper(AVISIT) == \"BASELINE\" ~ \"BL\",       grepl(\"WEEK\", toupper(AVISIT)) ~ paste(\"W\", trimws(substr(AVISIT, start = 6, stop = stringr::str_locate(AVISIT, \"DAY\") - 1))),       grepl(\"FOLLOW\", toupper(AVISIT)) ~ \"FU\",       TRUE ~ as.character(NA)     ),     AVISITCDN = case_when(       AVISITCD == \"SCR\" ~ -2,       AVISITCD == \"BL\" ~ 0,       grepl(\"W\", AVISITCD) ~ as.numeric(gsub(\"[^0-9]+\", \"\", AVISITCD)) * 7,       AVISITCD == \"FU\" ~ 100,       TRUE ~ as.numeric(NA)     ),     TRTORD = case_when(       TRT01P == \"A: Drug X\" ~ 1,       TRT01P == \"C: Combination\" ~ 2,       TRT01P == \"B: Placebo\" ~ 3,       TRUE ~ as.numeric(NA)     ),     LOQFL = if_else(as.character(LOQFL) == \"Y\", as.character(LOQFL), \"N\"), # need explicit \"N\" value for LOQFL     BASE2 = NA,     CHG2 = NA,     PCHG2 = NA   ) %>%   rowwise() %>%   group_by(PARAMCD) %>%   # only used for producing LOQ values in synthetic data not for study use   mutate(LBSTRESC = ifelse(     USUBJID %in% sample(USUBJID, 1, replace = TRUE),     paste(\"<\", round(runif(1, min = 25, max = 30))), LBSTRESC   )) %>%   mutate(LBSTRESC = ifelse(USUBJID %in% sample(USUBJID, 1, replace = TRUE),     paste(\">\", round(runif(1, min = 70, max = 75))), LBSTRESC   )) %>%   ungroup()  attr(ADLB_SUBSET[[\"LBSTRESC\"]], \"label\") <- \"Character Result/Finding in Std Format\" attr(ADLB_SUBSET[[\"ANRLO\"]], \"label\") <- \"Analysis Normal Range Lower Limit\" attr(ADLB_SUBSET[[\"ANRHI\"]], \"label\") <- \"Analysis Normal Range Upper Limit\"  # combined treatment and lineplot statistics overlay color color_comb <- \"#39ff14\"  # line and spaghetti plot x-axis tic and label controls. identify key visits to display at ticks # numeric comes from the AVISITCDN variable which controls chronological order x_tick_num <- c(-2, 0, 7, 14, 21, 28, 35) # label values are assigned here and can be customized or AVISITCD values x_tick_label <- c(\"Screening\", \"Baseline\", \"Week 1\", \"Week 2\", \"Week 3\", \"Week 4\", \"Week 5\")  ################################################################################ # END: SPA Input Required ################################################################################  ################################################################################ # BEGIN: Generic Data Post Processing ################################################################################  # identify the minimum non-zero value for AVAL for each PARAMCD. # non-zero minimum value used for log2 transformed analysis values PARAM_MINS <- ADLB_SUBSET %>%   select(USUBJID, PARAMCD, AVAL) %>%   group_by(PARAMCD) %>%   summarise(AVAL_MIN = min(AVAL, na.rm = TRUE), .groups = \"drop\") %>%   mutate(PARAMCD = PARAMCD %make_label% \"Parameter Code\")  # post process the data to create several new variables and adjust existing record specific values per specification # - adjust existing BASELINE record values where values are missing ADLB_SUPED1 <- ADLB_SUBSET %>%   mutate(BASE2 = ifelse(toupper(AVISIT) == \"SCREENING\" & is.na(BASE2), AVAL, BASE2) %keep_label% BASE2) %>%   mutate(CHG2 = ifelse(toupper(AVISIT) == \"SCREENING\" & is.na(CHG2), 0, CHG2) %keep_label% CHG2) %>%   mutate(PCHG2 = ifelse(toupper(AVISIT) == \"SCREENING\" & is.na(PCHG2), 0, PCHG2) %keep_label% PCHG2) %>%   mutate(BASE = ifelse(toupper(AVISIT) == \"BASELINE\" & is.na(BASE), AVAL, BASE) %keep_label% BASE) %>%   mutate(CHG = ifelse(toupper(AVISIT) == \"BASELINE\" & is.na(CHG), 0, CHG) %keep_label% CHG) %>%   mutate(PCHG = ifelse(toupper(AVISIT) == \"BASELINE\" & is.na(PCHG), 0, PCHG) %keep_label% PCHG) %>%   mutate(TRTORD = TRTORD %make_label% \"Treatment Order\")  # Inconsequential Warning issued: Warning: \"PARAMCD\" has different attributes on LHS and RHS of join. # merge minimum AVAL value onto the ADLB data to calculate the log2 variables. preserve the variable order ADLB_SUPED2 <- inner_join(PARAM_MINS, ADLB_SUPED1, by = \"PARAMCD\")[, union(names(ADLB_SUPED1), names(PARAM_MINS))] %>%   # visit values   # excludes biomarkers where log2 is not appropriate: for example assay value already log2   mutate(AVALL2 = ifelse(PARAMCD %in% exclude_l2, AVAL,     # excludes biomarkers where log2 is not appropriate: for example CHG type assay     ifelse(PARAMCD %in% exclude_chg, NA,       ifelse(AVAL == 0 & AVAL_MIN > 0, log2(AVAL_MIN / 2),         # would be taking log2 of 0 or negative value so set to NA         ifelse(AVAL == 0 & AVAL_MIN <= 0, NA,           ifelse(AVAL > 0, log2(AVAL), NA)         )       )     )   ) %make_label% \"Log2 of AVAL\") %>%   # baseline values   mutate(BASEL2 = ifelse(PARAMCD %in% exclude_l2, BASE,     ifelse(PARAMCD %in% exclude_chg, NA,       ifelse(BASE == 0 & AVAL_MIN > 0, log2(AVAL_MIN / 2),         ifelse(BASE == 0 & AVAL_MIN <= 0, NA,           ifelse(BASE > 0, log2(BASE), NA)         )       )     )   ) %make_label% \"Log2 of BASE\") %>%   # screening   mutate(BASE2L2 = ifelse(PARAMCD %in% exclude_l2, BASE2,     ifelse(PARAMCD %in% exclude_chg, NA,       ifelse(BASE2 == 0 & AVAL_MIN > 0, log2(AVAL_MIN / 2),         ifelse(BASE2 == 0 & AVAL_MIN <= 0, NA,           ifelse(BASE2 > 0, log2(BASE2), NA)         )       )     )   ) %make_label% \"Log2 of BASE2\") %>%   mutate(AVAL_MIN = AVAL_MIN %make_label% \"Minimum AVAL Within PARAMCD\")  # create final data set used by goshawk # all data set passed into a goshawk app must have all of the columns # `AVISITCD`, `BASE`, `BASE2`, `AVALU`, `LBSTRESC`, `LOQFL`, `CHG2`, and `PCHG2`. ADLB <- ADLB_SUPED2 %>%   mutate(     TRT01P = as.character(arm_mapping[match(TRT01P, names(arm_mapping))]),     TRT01P = factor(TRT01P) %>% reorder(TRTORD) %make_label% \"Planned Treatment for Period 01\",     TRT01A = as.character(arm_mapping[match(TRT01A, names(arm_mapping))]),     TRT01A = factor(TRT01A) %>% reorder(TRTORD) %make_label% \"Actual Treatment for Period 01\",     LOQFL = LOQFL %make_label% \"Limit of Quantification\",     AVISITCD = factor(AVISITCD) %>% reorder(AVISITCDN) %make_label% \"Analysis Visit Window Code\",     AVISITCDN = AVISITCDN %make_label% \"Analysis Visit Window Code (N)\",     BASE2 = BASE2 %make_label% \"Screening Value\",     CHG2 = CHG2 %make_label% \"Absolute Change from Screening\",     PCHG2 = PCHG2 %make_label% \"Percent Change from Screening\"   )  # add LLOQ and ULOQ variables to support adding horizontal/vertical range lines # LBSTRESC is carried forward from SDTM and used for deriving an AVAL value and assigning the LOQFL value #  - expectation is that LBSTRESC LOQ values are \"< x\" or \"> y\" format. #  - value assigned to AVAL is x/2 and y respectively. LOQFL is assigned \"Y\" #  - other LBSTRESC value formats will need to be pre-pocessed so that AVAL and LOQFL are assigned as desired # LBSTRESC is required in order to use the h_identify_loq_values function. if this is not available then LBSTRESC <- AVAL ADLB_LOQS <- goshawk:::h_identify_loq_values(ADLB) ADLB <- left_join(ADLB, ADLB_LOQS, by = \"PARAM\")  ################################################################################ # END: Generic Data Post Processing ################################################################################  # <code  # USER INTERFACE CONFIGURATIONS: match with available analysis variables to display them in pull down menus arm_vars <- c(\"TRT01A\", \"TRT01P\", \"SEX\", \"RACE\")  demog_vars_asl <- function(data) {   date_vars_asl <- names(data)[vapply(data, function(x) inherits(x, c(\"Date\", \"POSIXct\", \"POSIXlt\")), logical(1))]   names(data)[!(names(data) %in% c(\"USUBJID\", \"STUDYID\", date_vars_asl))] }  anl_vars1 <- c(\"AVAL\", \"BASE\", \"CHG\", \"PCHG\", \"AVALL2\") anl_vars2 <- c(\"AVAL\", \"CHG\", \"PCHG\", \"AVALL2\") box_xaxis_vars <- c(\"TRT01A\", \"TRT01P\", \"AVISITCD\", \"STUDYID\") dm_vars <- c(\"SEX\", \"AGE\", \"RACE\")  # response variable menu controls. match with available response variables in ADLB box_facet_vars <- c(\"TRT01A\", \"TRT01P\", \"AVISITCD\") line_splits <- c(\"SEX\") cs_params <- choices_selected(choices = value_choices(\"ADLB\", \"PARAMCD\", \"PARAM\"), selected = \"ALT\")  cs_arm_vars <- choices_selected(   choices = variable_choices(\"ADSL\", subset = arm_vars),   selected = \"TRT01A\" )  cs_anl_vars1_1 <- choices_selected(   choices = variable_choices(\"ADLB\", subset = anl_vars1),   selected = \"BASE\" )  cs_anl_vars1_2 <- choices_selected(   choices = variable_choices(\"ADLB\", subset = anl_vars1),   selected = \"AVAL\" )  cs_anl_vars2 <- choices_selected(   choices = variable_choices(\"ADLB\", subset = anl_vars2),   selected = \"AVAL\" )  cs_dm_vars <- choices_selected(   choices = variable_choices(\"ADSL\", demog_vars_asl),   selected = dm_vars )  cs_box_facet_vars <- choices_selected(   choices = variable_choices(\"ADLB\", subset = box_facet_vars),   selected = \"AVISITCD\" )  cs_box_xaxis_vars <- choices_selected(   choices = variable_choices(\"ADLB\", subset = box_xaxis_vars),   selected = \"TRT01P\" )  cs_line_splits <- choices_selected(   choices = variable_choices(\"ADSL\", subset = line_splits),   selected = NULL )  # create ADSL metadata for Source Data tab adsl_source <- \"Randomly generated CDISC data\" adsl_time <- \"Current\"  sdsl_label <- c(\"Subject Level Analysis Data Set\")  # get number of subjects sdsl_nsubjs <- ADSL %>%   pull(USUBJID) %>%   unique()  # create ADLB metadata for Source Data tab adlb_source <- \"Randomly generated CDISC data\" adlb_time <- \"Current\"  sdlb_label <- c(\"Laboratory/Biomarker Analysis Data Set\")  # get number of subjects sdlb_nsubjs <- ADLB %>%   pull(USUBJID) %>%   unique()  # create biomarkers of interest dictionary table to display to user paramDict <- unique(ADLB[c(\"PARAM\", \"PARAMCD\")]) paramDict <- paramDict[order(paramDict$PARAM), ] param_list <- paramDict$PARAM paramcd_list <- paramDict$PARAMCD  # create list of biomarkers excluded from log2 transformation paramexcldDict <- paramDict %>%   filter(PARAMCD %in% c(exclude_l2, exclude_chg)) paramexcld_list <- paramexcldDict$PARAM paramcdexcld_list <- paramexcldDict$PARAMCD  x <- teal::init(   data = cdisc_data(     cdisc_dataset(\"ADSL\", ADSL),     cdisc_dataset(\"ADLB\", ADLB),     code = get_code(\"app.R\",       exclude_comments = TRUE,       read_sources = TRUE     ),     check = FALSE   ),   modules = modules(     module(       \"User Guide\",       server = function(input, output, session, datasets) {},       ui = function(id, ...) {         div(           h5(             strong(\"Analysis Variable Legend\"), actionLink(\"showAnlVarLegendModal\", tags$img(               height = 15, width = 15,               src = \"img/qmark.png\"             ))           ),           h5(             strong(\"Key Variables:\")           ),           p(tags$ul(             h6(               \"The 'Description of Planned Arm' (ARM/TRT01P) variable is used to reflect ITT treatment for these longitudinal               visualizations. Alternative treatment variables and populations can be used as appropriate.\"             ),             h6(               \"The 'Parameter Code' (PARAMCD) variable is used to select biomarker/lab of interest.               The 'Source Data' tab provides the 'Parameter Description' (PARAM). The biomarker/lab selection pull down               menu items are a concatenation of PARAMCD with PARAM for ease of identification.\"             ),             h6(               \"Pull down menus containing many items include search functionality to ease finding menu items.\"             ),             h6(               \"The 'Analysis Visit' (AVISIT) variable is used to display visit as an abbreviated analysis visit value.\"             )           )),           h5(             strong(\"Data Constraint Filter:\")           ),           p(tags$ul(             h6(               \"Selecting the Screening constraint will remove subjects who do not satisfy the filter range based on             their screening value for the given assay.\"             ),             h6(               \"Selecting the Baseline constraint will remove subjects who do not satisfy the filter range based on             their baseline value for the given assay.\"             ),             h6(               \"Let's say subject #58 has a baseline value of 5 for assay x and the range of assay x across all             subjects is 1 to 10. If the the baseline constraint is selected and the value range slider is changed             to a range of 7 to 10 then subjects who do not meet that condition are removed from the longitudinal             visualizations. Since subject #58 baseline value is 5 for assay x they are one of the subjects who is             removed.\"             )           )),           h5(             strong(\"Data Point Brushing:\")           ),           p(tags$ul(             h6(               \"Selecting specific data points to reveal Subject ID and other data are available for Box, Correlation and               Spaghetti Plot visualizations.\"             )           )),           h5(             strong(\"Log2 Variables:\")           ),           p(tags$ul(             h6(               \"Some biomarker/lab values are already log2 transformed or represent a change value. These are excluded from               log2 transform applied to biomarkers/labs at large.\",               do.call(                 # call shiny tagList                 shiny::tagList,                 # with a list of shiny::p elements (one for each element) by mapping a                 # '<p> builder' function over a list of values                 Map(function(paramexcld_list, paramcdexcld_list) {                   shiny::p(shiny::tags$ul(h6(paste0(paramexcld_list, \" ,\"), paramcdexcld_list)))                 }, paramcdexcld_list = paramcdexcld_list, paramexcld_list = paramexcld_list)               ),               br(),               p(\"Biomarkers/labs having a value of 0 are log2 transformed by taking log2 of the minimum non-zero value for                 that biomarker/lab, divided by 2.\")             )           )),           h5(             strong(\"Visualization Tab: Right Hand Data Filter Panel:\")           ),           p(tags$ul(             h6(               \"These filters are not hierarchical so should not be used to filter on analysis variables. To filter on                 analysis variables please use the filtering controls available in the left hand panel.\",               style = (\"color: #ff5700;\")             ),             h6(               \"Use right hand data panel filters to filter on categorical variables.\"             ),             tags$ul(               h6(\"AVISIT to exclude/include specific visits in visualizations.\"),               h6(\"LOQFL to exclude/include LOQ flagged values.\"),               h6(\"SEX to exclude/include specific gender.\"),               h6(\"Etc.\")             )           )),           h5(             strong(\"Visualization Specifics:\")           ),           p(tags$ul(             h6(               strong(\"Box Plot:\")             )           )),           p(tags$ul(tags$ul(             h6(\"Selecting STUDYID as X-Axis variable will produce the visualization with all subjects combined and identify the study on the X-Axis.\")           ))),           p(tags$ul(             h6(               strong(\"Correlation Plot:\")             )           )),           p(tags$ul(tags$ul(             h6(\"The data constraint that can be placed on Screening or Baseline records is associated with the analysis                variable and Biomarker selected for the X-Axis only.\"),           ))),           p(tags$ul(tags$ul(             h6(\"The Limit of Quantification (LOQFL) flag is set if either of the biomarker/lab values is identified as              LOQ. The brushing table column header reflects this as LOQFL_COMB.\"),           ))),           p(tags$ul(tags$ul(             h6(\"The 'Regression Line' option should only be used in conjunction with the 'Treatment Facetting' option.                  Otherwise the per treatment regression formula and coefficient annotations will overlay.\")           ))),           p(tags$ul(             h6(               strong(\"Line Plot:\")             )           )),           p(tags$ul(tags$ul(             h6(\"If an error is displayed related to plot height it's best to first alter the relative plot height in the left panel using the slider. For additional plot height control, use the icons in the upper right corner of the visualization.\"),           ))),           h5(             strong(\"Copying Content:\")           ),           p(tags$ul(             h6(               \"To copy data from the descriptive summary table, highlight, copy and paste special into Excel using               'Unicode Text'.\"             )           )),           p(tags$ul(             h6(               \"To copy a visualization, right click               options.\"             )           ))         )       },       filters = NULL     ),     module(       \"Source Data\",       server = function(input, output, session, datasets) {},       ui = function(id, ...) {         div(           h5(strong(\"Molecule:\"), MOLECULE),           h5(strong(\"Indication:\"), INDICATION),           h5(strong(\"Study:\"), STUDY),           h5(strong(\"Analysis Type:\"), ATYPE),           tags$ul(             h6(               p(strong(\"Subject Level Data Set:\"), adsl_source),               p(strong(\"Data Set Label:\"), sdsl_label),               p(strong(\"Data Set Owner:\"), a(lead_spa_name,                 href = paste0(\"https://en.wikipedia.org/wiki/\", lead_spa_uid),                 title = \"Click here for detailed user contact\",                 target = \"blank\"               )),               p(strong(\"Data Set Creation DateTime:\"), adsl_time),               p(strong(\"Number of  Subjects:\"), format(length(sdsl_nsubjs), big.mark = \",\")),               p(strong(\"Number of Variables:\"), format(length(names(ADSL)), big.mark = \",\")),               p(strong(\"Number of Records:\"), format(nrow(ADSL), big.mark = \",\")),               br(),               p(strong(\"Biomarker Data Set (Identified as ADLB in app):\"), adlb_source),               p(strong(\"Data Set Label:\"), sdlb_label),               p(strong(\"Data Set Owner:\"), a(lead_spa_name,                 href = paste0(\"https://en.wikipedia.org/wiki/\", lead_spa_uid),                 title = \"Click here for detailed user contact\",                 target = \"blank\"               )),               p(strong(\"Data Set Creation DateTime:\"), adlb_time),               p(strong(\"Number of  Subjects:\"), format(length(sdlb_nsubjs), big.mark = \",\")),               p(strong(\"Number of Variables Kept for Visualizations:\"), format(length(names(ADLB)), big.mark = \",\")),               p(strong(\"Number of Records for Biomarkers of Interest:\"), format(nrow(ADLB), big.mark = \",\")),               p(strong(\"Number of Biomarkers of Interest:\"), format(length(table(ADLB$PARAMCD)), big.mark = \",\")),               br(),               p(strong(\"Biomarkers of interest (label, code):\")),               do.call(                 # call shiny tagList                 shiny::tagList,                 # with a list of shiny::p elements (one for each letter) by mapping a                 # '<p> builder' function over a list of values                 Map(function(param_list, paramcd_list) {                   shiny::p(shiny::tags$ul(h6(paste0(param_list, \" ,\"), paramcd_list)))                 }, paramcd_list = paramcd_list, param_list = param_list)               )             )           )         )       },       filters = NULL     ),     tm_variable_browser(label = \"View Variables\"),     tm_data_table(label = \"View Data\"),     tm_t_summary(       label = \"Demographics\",       dataname = \"ADSL\",       arm_var = cs_arm_vars,       summarize_vars = cs_dm_vars     ),     modules(       label = \"Visualizations\",       tm_g_gh_boxplot(         label = \"Box Plot\",         dataname = \"ADLB\",         param_var = \"PARAMCD\",         param = cs_params,         facet_var = cs_box_facet_vars,         xaxis_var = cs_box_xaxis_vars,         yaxis_var = cs_anl_vars2,         plot_height = c(500, 200, 2000),         trt_group = cs_arm_vars,         color_manual = color_manual,         shape_manual = shape_manual,         rotate_xlab = TRUE,         hline_arb = c(10, 30),         hline_arb_color = c(\"grey\", \"red\"),         hline_arb_label = c(\"default_hori_A\", \"default_hori_B\"),         hline_vars = c(\"ANRHI\", \"ANRLO\", \"ULOQN\", \"LLOQN\"),         hline_vars_colors = c(\"pink\", \"brown\", \"purple\", \"gray\")       ),       tm_g_gh_correlationplot(         label = \"Correlation Plot\",         dataname = \"ADLB\",         param_var = \"PARAMCD\",         xaxis_param = cs_params,         xaxis_var = cs_anl_vars1_1,         yaxis_param = cs_params,         yaxis_var = cs_anl_vars1_2,         trt_group = cs_arm_vars,         color_manual = color_manual,         shape_manual = shape_manual,         plot_height = c(500, 200, 2000),         facet_ncol = 2,         trt_facet = FALSE,         reg_line = FALSE,         rotate_xlab = TRUE,         font_size = c(12, 8, 20),         dot_size = c(1, 1, 12),         reg_text_size = c(3, 3, 10),         hline_arb = c(10, 30),         hline_arb_label = \"arb hori label\",         hline_arb_color = c(\"red\", \"blue\"),         hline_vars = c(\"ANRHI\", \"ANRLO\", \"ULOQN\", \"LLOQN\"),         hline_vars_colors = c(\"pink\", \"brown\", \"purple\", \"gray\"),         hline_vars_labels = c(\"ANRHI Label\", \"ANRLO Label\", \"ULOQN Label\", \"LLOQN Label\"),         vline_arb = c(50, 70),         vline_arb_label = \"arb vert A\",         vline_arb_color = c(\"green\", \"orange\"),         vline_vars = c(\"ANRHI\", \"ANRLO\", \"ULOQN\", \"LLOQN\"),         vline_vars_colors = c(\"yellow\", \"orange\", \"brown\", \"gold\"),         vline_vars_labels = c(\"ANRHI Label\", \"ANRLO Label\", \"ULOQN Label\", \"LLOQN Label\")       ),       tm_g_gh_density_distribution_plot(         label = \"Density Distribution Plot\",         dataname = \"ADLB\",         param_var = \"PARAMCD\",         param = cs_params,         xaxis_var = cs_anl_vars2,         trt_group = cs_arm_vars,         color_manual = color_manual,         color_comb = color_comb,         rotate_xlab = TRUE,         plot_height = c(500, 200, 2000),         font_size = c(12, 8, 20),         line_size = c(1, 1, 12),         hline_arb = c(.02, .05),         hline_arb_color = c(\"red\", \"black\"),         hline_arb_label = c(\"Horizontal Line A\", \"Horizontal Line B\")       ),       tm_g_gh_lineplot(         label = \"Line Plot\",         dataname = \"ADLB\",         param_var = \"PARAMCD\",         param = cs_params,         shape_choices = cs_line_splits,         xaxis_var = choices_selected(variable_choices(\"ADLB\", \"AVISITCDN\"), \"AVISITCDN\"),         yaxis_var = cs_anl_vars2,         trt_group = cs_arm_vars,         color_manual = color_manual,         rotate_xlab = TRUE,         plot_height = c(600, 200, 2000),         xtick = x_tick_num,         xlabel = x_tick_label       ),       tm_g_gh_spaghettiplot(         label = \"Spaghetti Plot\",         dataname = \"ADLB\",         idvar = \"USUBJID\",         param_var = \"PARAMCD\",         param = cs_params,         xaxis_var = choices_selected(variable_choices(\"ADLB\", \"AVISITCDN\"), \"AVISITCDN\"),         yaxis_var = cs_anl_vars2,         trt_group = cs_arm_vars,         man_color = color_manual,         color_comb = color_comb,         rotate_xlab = TRUE,         plot_height = c(500, 200, 2000),         xtick = x_tick_num,         xlabel = x_tick_label,         hline_arb = c(10, 30),         hline_arb_color = c(\"grey\", \"red\"),         hline_arb_label = c(\"default A\", \"default B\"),         hline_vars = c(\"ANRHI\", \"ANRLO\", \"ULOQN\", \"LLOQN\"),         hline_vars_colors = c(\"pink\", \"brown\", \"purple\", \"gray\")       )     )   ),   header = tags$h1(\"Longitudinal Visualizations: \", trimws(MOLECULE), \"-\", trimws(INDICATION), \"-\", trimws(STUDY)),   footer = tags$p(actionLink(\"showAboutModal\", \"About,\"),     tags$a(\"Issues\", href = \"https://github.com/insightsengineering/teal.gallery/issues\", target = \"_blank\"),     p(\"Packages: teal.goshawk, goshawk\"),     p(\"Authors: NEST Core Dev Team\"),     p(\"Copyright 2023\"),     class = \"text-muted\"   ) )  # Add context sensitive help code body(x$server)[[length(body(x$server)) + 1]] <- quote(   observeEvent(input$showAnlVarLegendModal, {     showModal(modalDialog(       title = \"Analysis Variable Pull Down Menu\",       tags$p(         \"These variables will appear in the Visualizations 'Analysis Variable' pull down menu. This legend             provides the variable labels to help clarify the short analysis variable names displayed in the pull down           menu.\"       ),       p(\"BASE2 = Screening Visit Value\"),       p(\"BASE2L2 = Log2(BASE2)\"),       p(\"CHG2 = Change from Screening\"),       p(\"PCHG2 =  % Change from Screening\"),       p(\"BASE = Baseline Visit Value\"),       p(\"BASEL2 = Log2(BASE)\"),       p(\"CHG = Change from Baseline\"),       p(\"PCHG =  % Change from Baseline\"),       p(\"AVAL = Visit Values\"),       p(\"AVALL2 = Log2(AVAL)\"),       easyClose = TRUE     ))   }) )  body(x$server)[[length(body(x$server)) + 1]] <- quote(   observeEvent(input$showAboutModal, {     showModal(modalDialog(       title = \"About this shiny app: Longitudinal Visualizations\",       tags$p(         \"This shiny app was brought to you by the NEST Team. For more information, please visit:\"       ),       tags$ul(         tags$li(tags$a(           href = \"https://github.com/insightsengineering\", \"Insights Engineering\",           target = \"blank\"         )),         tags$li(tags$a(           href = \"https://pharmaverse.org\", \"Pharmaverse\",           target = \"blank\"         ))       ),       tags$p(         paste0(\"The app uses R version: \", R.version$version.string)       ),       tags$p(         paste0(\"The app uses teal version: \", utils::packageDescription(pkg = \"teal\", fields = \"Version\"))       ),       easyClose = TRUE     ))   }) )  shinyApp(x$ui, x$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"patient-profile","dir":"Articles","previous_headings":"Sample app source code","what":"patient-profile","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/patient-profile","code":"library(teal.modules.clinical) library(teal.modules.general) library(scda) library(scda.2022) library(nestcolor)  options(shiny.useragg = FALSE)  ADSL <- synthetic_cdisc_data(\"latest\")$adsl ADMH <- synthetic_cdisc_data(\"latest\")$admh ADAE <- synthetic_cdisc_data(\"latest\")$adae ADCM <- synthetic_cdisc_data(\"latest\")$adcm ADVS <- synthetic_cdisc_data(\"latest\")$advs ADLB <- synthetic_cdisc_data(\"latest\")$adlb  ## Modify ADCM ADCM$CMINDC <- paste0(\"Indication_\", as.numeric(ADCM$CMDECOD)) ADCM$CMDOSE <- 1 ADCM$CMTRT <- ADCM$CMCAT ADCM$CMDOSU <- \"U\" ADCM$CMROUTE <- \"CMROUTE\" ADCM$CMDOSFRQ <- \"CMDOSFRQ\" ADCM$CMASTDTM <- ADCM$ASTDTM ADCM$CMAENDTM <- ADCM$AENDTM  formatters::var_labels(   ADCM[c(\"CMINDC\", \"CMTRT\", \"ASTDY\", \"AENDY\")] ) <- c(   \"Indication\",   \"Reported Name of Drug, Med, or Therapy\",   \"Study Day of Start of Medication\",   \"Study Day of End of Medication\" )  ## Modify ADHM ADMH[[\"MHDISTAT\"]] <- \"ONGOING\" formatters::var_labels(ADMH[c(\"MHDISTAT\")]) <- c(\"Status of Disease\")  ## Define variable inputs aeterm_input <- data_extract_spec(   dataname = \"ADAE\",   select = select_spec(     choices = variable_choices(ADAE, \"AETERM\"),     selected = c(\"AETERM\"),     multiple = FALSE,     fixed = FALSE   ) )  cmtrt_input <- data_extract_spec(   dataname = \"ADCM\",   select = select_spec(     choices = variable_choices(ADCM, \"CMTRT\"),     selected = c(\"CMTRT\"),     multiple = FALSE,     fixed = FALSE   ) )  cmindc_input <- data_extract_spec(   dataname = \"ADCM\",   select = select_spec(     choices = variable_choices(ADCM, \"CMINDC\"),     selected = c(\"CMINDC\"),     multiple = FALSE,     fixed = FALSE   ) )  atirel_input <- data_extract_spec(   dataname = \"ADCM\",   select = select_spec(     choices = variable_choices(ADCM, \"ATIREL\"),     selected = c(\"ATIREL\"),     multiple = FALSE,     fixed = FALSE   ) )  cmdecod_input <- data_extract_spec(   dataname = \"ADCM\",   select = select_spec(     choices = variable_choices(ADCM, \"CMDECOD\"),     selected = c(\"CMDECOD\"),     multiple = FALSE,     fixed = FALSE   ) )  app <- init(   data = cdisc_data(     cdisc_dataset(\"ADSL\", ADSL, code = \"ADSL <- synthetic_cdisc_data(\\\"latest\\\")$adsl\"),     cdisc_dataset(\"ADAE\", ADAE, code = \"ADAE <- synthetic_cdisc_data(\\\"latest\\\")$adae\"),     cdisc_dataset(\"ADMH\", ADMH, code = \"ADMH <- synthetic_cdisc_data(\\\"latest\\\")$admh       ADMH[['MHDISTAT']] <- 'ONGOING'       formatters::var_labels(ADMH[c('MHDISTAT')]) <- c('Status of Disease')\"),     cdisc_dataset(\"ADCM\", ADCM, code = 'ADCM <- synthetic_cdisc_data(\\\"latest\\\")$adcm       ADCM$CMINDC <- paste0(\"Indication_\", as.numeric(ADCM$CMDECOD))       ADCM$CMDOSE <- 1       ADCM$CMTRT <- ADCM$CMCAT       ADCM$CMDOSU <- \"U\"       ADCM$CMROUTE <- \"CMROUTE\"       ADCM$CMDOSFRQ <- \"CMDOSFRQ\"       ADCM$CMASTDTM <- ADCM$ASTDTM       ADCM$CMAENDTM <- ADCM$AENDTM       formatters::var_labels(         ADCM[c(\"CMINDC\", \"CMTRT\", \"ASTDY\", \"AENDY\")]) <- c(           \"Indication\",           \"Reported Name of Drug, Med, or Therapy\",           \"Study Day of Start of Medication\",           \"Study Day of End of Medication\")'),     cdisc_dataset(\"ADVS\", ADVS, code = \"ADVS <- synthetic_cdisc_data(\\\"latest\\\")$advs\"),     cdisc_dataset(\"ADLB\", ADLB, code = \"ADLB <- synthetic_cdisc_data(\\\"latest\\\")$adlb\"),     check = TRUE   ),   modules = modules(     tm_front_page(       label = \"Study Information\",       header_text = c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),       tables = list(`NEST packages used` = data.frame(Packages = c(\"teal.modules.general\", \"teal.modules.clinical\", \"scda\", \"scda.2022\")))     ),     tm_t_pp_basic_info(       label = \"Basic info\",       dataname = \"ADSL\",       patient_col = \"USUBJID\",       vars = data_extract_spec(         dataname = \"ADSL\",         select = select_spec(           choices = variable_choices(ADSL),           selected = c(\"ARM\", \"AGE\", \"SEX\", \"COUNTRY\", \"RACE\", \"EOSSTT\"),           multiple = TRUE,           fixed = FALSE         )       )     ),     tm_t_pp_medical_history(       label = \"Medical history\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       mhterm = data_extract_spec(         dataname = \"ADMH\",         select = select_spec(           choices = variable_choices(ADMH, c(\"MHTERM\")),           selected = c(\"MHTERM\"),           multiple = FALSE,           fixed = FALSE         )       ),       mhbodsys = data_extract_spec(         dataname = \"ADMH\",         select = select_spec(           choices = variable_choices(ADMH, \"MHBODSYS\"),           selected = c(\"MHBODSYS\"),           multiple = FALSE,           fixed = FALSE         )       ),       mhdistat = data_extract_spec(         dataname = \"ADMH\",         select = select_spec(           choices = variable_choices(ADMH, \"MHDISTAT\"),           selected = c(\"MHDISTAT\"),           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_t_pp_prior_medication(       label = \"Prior medication\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       atirel = atirel_input,       cmdecod = cmdecod_input,       cmindc = cmindc_input,       cmstdy = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"ASTDY\"),           selected = c(\"ASTDY\"),           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_g_pp_vitals(       label = \"Vitals\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       plot_height = c(600L, 200L, 2000L),       paramcd = data_extract_spec(         dataname = \"ADVS\",         select = select_spec(           choices = variable_choices(ADVS, \"PARAMCD\"),           selected = c(\"PARAMCD\"),           multiple = FALSE,           fixed = FALSE         )       ),       xaxis = data_extract_spec(         dataname = \"ADVS\",         select = select_spec(           choices = variable_choices(ADVS, \"ADY\"),           selected = c(\"ADY\"),           multiple = FALSE,           fixed = FALSE         )       ),       aval = data_extract_spec(         dataname = \"ADVS\",         select = select_spec(           choices = variable_choices(ADVS, \"AVAL\"),           selected = c(\"AVAL\"),           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_g_pp_therapy(       label = \"Therapy\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       plot_height = c(600L, 200L, 2000L),       atirel = atirel_input,       cmdecod = cmdecod_input,       cmindc = cmindc_input,       cmdose = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMDOSE\"),           selected = c(\"CMDOSE\"),           multiple = FALSE,           fixed = FALSE         )       ),       cmtrt = cmtrt_input,       cmdosu = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMDOSU\"),           selected = c(\"CMDOSU\"),           multiple = FALSE,           fixed = FALSE         )       ),       cmroute = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMROUTE\"),           selected = c(\"CMROUTE\"),           multiple = FALSE,           fixed = FALSE         )       ),       cmdosfrq = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMDOSFRQ\"),           selected = c(\"CMDOSFRQ\"),           multiple = FALSE,           fixed = FALSE         )       ),       cmstdy = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"ASTDY\"),           selected = c(\"ASTDY\"),           multiple = FALSE,           fixed = FALSE         )       ),       cmendy = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"AENDY\"),           selected = c(\"AENDY\"),           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_g_pp_adverse_events(       label = \"Adverse events\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       plot_height = c(600L, 200L, 2000L),       aeterm = aeterm_input,       tox_grade = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AETOXGR\"),           selected = c(\"AETOXGR\"),           multiple = FALSE,           fixed = FALSE         )       ),       causality = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AEREL\"),           selected = c(\"AEREL\"),           multiple = FALSE,           fixed = FALSE         )       ),       outcome = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AEOUT\"),           selected = c(\"AEOUT\"),           multiple = FALSE,           fixed = FALSE         )       ),       action = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AEACN\"),           selected = c(\"AEACN\"),           multiple = FALSE,           fixed = FALSE         )       ),       time = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"ASTDY\"),           selected = c(\"ASTDY\"),           multiple = FALSE,           fixed = FALSE         )       ),       decod = NULL     ),     tm_t_pp_laboratory(       label = \"Lab values\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       paramcd = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"PARAMCD\"),           selected = c(\"PARAMCD\"),           multiple = FALSE,           fixed = FALSE         )       ),       param = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"PARAM\"),           selected = c(\"PARAM\"),           multiple = FALSE,           fixed = FALSE         )       ),       timepoints = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"ADY\"),           selected = c(\"ADY\"),           multiple = FALSE,           fixed = FALSE         )       ),       anrind = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"ANRIND\"),           selected = c(\"ANRIND\"),           multiple = FALSE,           fixed = FALSE         )       ),       aval = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"AVAL\"),           selected = c(\"AVAL\"),           multiple = FALSE,           fixed = FALSE         )       ),       avalu = data_extract_spec(         dataname = \"ADLB\",         select = select_spec(           choices = variable_choices(ADLB, \"AVALU\"),           selected = c(\"AVALU\"),           multiple = FALSE,           fixed = FALSE         )       )     ),     tm_g_pp_patient_timeline(       label = \"Patient timeline\",       parentname = \"ADSL\",       patient_col = \"USUBJID\",       plot_height = c(600L, 200L, 2000L),       font_size = c(15L, 8L, 25L),       cmdecod = cmdecod_input,       aeterm = aeterm_input,       aetime_start = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"ASTDTM\"),           selected = c(\"ASTDTM\"),           multiple = FALSE,           fixed = FALSE         )       ),       aetime_end = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AENDTM\"),           selected = c(\"AENDTM\"),           multiple = FALSE,           fixed = FALSE         )       ),       dstime_start = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMASTDTM\"),           selected = c(\"CMASTDTM\"),           multiple = FALSE,           fixed = FALSE         )       ),       dstime_end = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"CMAENDTM\"),           selected = c(\"CMAENDTM\"),           multiple = FALSE,           fixed = FALSE         )       ),       aerelday_start = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"ASTDY\"),           selected = c(\"ASTDY\"),           multiple = FALSE,           fixed = FALSE         )       ),       aerelday_end = data_extract_spec(         dataname = \"ADAE\",         select = select_spec(           choices = variable_choices(ADAE, \"AENDY\"),           selected = c(\"AENDY\"),           multiple = FALSE,           fixed = FALSE         )       ),       dsrelday_start = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"ASTDY\"),           selected = c(\"ASTDY\"),           multiple = FALSE,           fixed = FALSE         )       ),       dsrelday_end = data_extract_spec(         dataname = \"ADCM\",         select = select_spec(           choices = variable_choices(ADCM, \"AENDY\"),           selected = c(\"AENDY\"),           multiple = FALSE,           fixed = FALSE         )       )     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(\"Example Patient Profile App\", tags$span(\"SPA\", class = \"pull-right\"))   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\") )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"python","dir":"Articles","previous_headings":"Sample app source code","what":"python","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/python","code":"library(reticulate) library(teal) library(teal.modules.general) library(nestcolor) library(sparkline) library(ggpmisc)  options(shiny.useragg = FALSE)  reticulate::use_python(Sys.getenv(\"RETICULATE_PYTHON\", unset = \"/usr/bin/python3\")) iris_raw <- cbind(id = 1:nrow(iris), iris)  python_code <- \"import pandas as pd data = r.data_raw def svd_whiten(dat):   import numpy as np   X = np.matrix(dat)   U, s, Vt = np.linalg.svd(X, full_matrices=False)   X_white = np.dot(U, Vt)   return X_white data_columns = data.columns global numeric_cols_ix global numeric_cols numeric_cols_ix = list(range(5))[1:] numeric_cols = [x for i,x in enumerate(data_columns) if i in numeric_cols_ix] svd_res = svd_whiten(data.iloc[:, numeric_cols_ix]) data_new = pd.concat([data, pd.DataFrame(svd_res)], axis = 1) data_new.columns = list(data_columns) + [i + '.whiten' for i in numeric_cols] data_new \"  app <- teal::init(   data = teal_data(python_dataset_connector(     \"IRIS\",     code = python_code,     object = \"data_new\",     keys = \"id\",     vars = list(data_raw = iris_raw)   )) %>% mutate_data(\"IRIS$id <- as.integer(IRIS$id)\"),   title = \"Example teal app using python connector\",   modules = modules(     tm_data_table(\"Data Table\"),     tm_variable_browser(\"Variable Browser\"),     tm_g_scatterplot(       \"Scatterplot\",       x = data_extract_spec(         dataname = \"IRIS\",         select = select_spec(           label = \"Select variable:\",           choices = variable_choices(\"IRIS\", c(             \"Sepal.Length\", \"Sepal.Width\",             \"Petal.Length\", \"Petal.Width\",             \"Sepal.Length.whiten\", \"Sepal.Width.whiten\",             \"Petal.Length.whiten\", \"Petal.Width.whiten\"           )),           selected = \"Petal.Length.whiten\",           multiple = FALSE,           fixed = FALSE         )       ),       y = data_extract_spec(         dataname = \"IRIS\",         select = select_spec(           label = \"Select variable:\",           choices = variable_choices(\"IRIS\", c(             \"Sepal.Length\", \"Sepal.Width\",             \"Petal.Length\", \"Petal.Width\",             \"Sepal.Length.whiten\", \"Sepal.Width.whiten\",             \"Petal.Length.whiten\", \"Petal.Width.whiten\"           )),           selected = \"Petal.Width.whiten\",           multiple = FALSE,           fixed = FALSE         )       ),       color_by = data_extract_spec(         dataname = \"IRIS\",         select = select_spec(           label = \"Select variable:\",           choices = variable_choices(\"IRIS\", c(\"Species\")),           selected = \"Species\",           multiple = FALSE,           fixed = FALSE         )       )     )   ),   header = \"Example teal app using python connector\",   footer = \"\" )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"rna-seq","dir":"Articles","previous_headings":"Sample app source code","what":"RNA-seq","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/RNA-seq","code":"library(teal.modules.hermes) library(teal.modules.general) library(scda.2022) library(nestcolor)  options(shiny.useragg = FALSE)  # code> mae <- hermes::multi_assay_experiment mae_data <- dataset(\"MAE\", mae)  adtte <- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %>%   dplyr::mutate(is_event = CNSR == 0)  data <- teal_data(   dataset(     \"ADTTE\",     adtte,     code = 'adtte <- scda::synthetic_cdisc_data(\"rcd_2022_06_27\")$adtte %>%       dplyr::mutate(is_event = CNSR == 0)'   ),   dataset(\"MAE\", mae) )  app <- init(   data = data,   modules = modules(     tm_front_page(       label = \"App Info\",       header_text = c(\"Study Information\" = \"Random data are used that has been created with the 'scda' and 'hermes' R packages.\"),     ),     tm_g_quality(       label = \"Quality Control\",       mae_name = \"MAE\"     ),     tm_g_pca(       label = \"PCA plot\",       mae_name = \"MAE\"     ),     teal.modules.hermes::tm_g_scatterplot(       label = \"Scatterplot\",       mae_name = \"MAE\"     ),     tm_g_boxplot(       label = \"Boxplot\",       mae_name = \"MAE\"     ),     tm_g_barplot(       label = \"Barplot\",       mae_name = \"MAE\"     ),     tm_g_volcanoplot(       label = \"Volcanoplot\",       mae_name = \"MAE\"     ),     tm_g_forest_tte(       label = \"Forestplot\",       adtte_name = \"ADTTE\",       mae_name = \"MAE\"     ),     tm_g_km(       label = \"Kaplan-Meier\",       adtte_name = \"ADTTE\",       mae_name = \"MAE\"     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(       \"Example App with teal.modules.hermes modules\",       tags$span(\"SPA\", class = \"pull-right\")     )   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\") ) ## Not run: shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"safety","dir":"Articles","previous_headings":"Sample app source code","what":"safety","title":"Sample Apps Source Code","text":"Deployed app: https://shinyapps.io/NEST/main/safety","code":"options(shiny.useragg = FALSE)  library(dplyr) library(scda) library(scda.2022) library(teal.modules.general) library(teal.modules.clinical) library(nestcolor) library(sparkline)  # code> ## Generate Data ADSL <- synthetic_cdisc_data(\"latest\")$adsl  ## Create variable type lists date_vars_adsl <-   names(ADSL)[vapply(ADSL, function(x) {     inherits(x, c(\"Date\", \"POSIXct\", \"POSIXlt\"))   }, logical(1))] char_vars_adsl <- names(Filter(isTRUE, sapply(ADSL, is.character)))  ADAE <- synthetic_cdisc_data(\"latest\")$adae ADAETTE <- synthetic_cdisc_data(\"latest\")$adaette ADAETTE <- ADAETTE %>%   mutate(is_event = case_when(     grepl(\"TOT\", .data$PARAMCD, fixed = TRUE) ~ TRUE,     TRUE ~ CNSR == 0   )) %>%   mutate(n_events = case_when(     grepl(\"TOT\", .data$PARAMCD, fixed = TRUE) ~ as.integer(.data$AVAL),     TRUE ~ as.integer(is_event)   )) %>%   formatters::var_relabel(is_event = \"Is an Event\") %>%   formatters::var_relabel(n_events = \"Number of Events\") ADAETTE_AE <-   filter(ADAETTE, grepl(\"TOT\", .data$PARAMCD, fixed = TRUE)) %>% select(-\"AVAL\") ADAETTE_OTH <-   filter(ADAETTE, !(grepl(\"TOT\", .data$PARAMCD, fixed = TRUE)))  ADAETTE_TTE <- ADAETTE %>%   filter(PARAMCD == \"AEREPTTE\") %>%   select(USUBJID, ARM, ARMCD, AVAL)  ADAETTE_AE <-   full_join(ADAETTE_AE, ADAETTE_TTE, by = c(\"USUBJID\", \"ARM\", \"ARMCD\")) ADAETTE <- rbind(ADAETTE_AE, ADAETTE_OTH)  ADEX <- synthetic_cdisc_data(\"latest\")$adex ADEX_labels <- formatters::var_labels(ADEX, fill = FALSE) # Below steps are done to simulate data with TDURD parameter as it is not in the ADEX data from scda package set.seed(1, kind = \"Mersenne-Twister\") ADEX <- ADEX %>%   distinct(USUBJID, .keep_all = TRUE) %>%   mutate(     PARAMCD = \"TDURD\",     PARAM = \"Overall duration (days)\",     AVAL = sample(       x = seq(1, 200),       size = n(),       replace = TRUE     ),     AVALU = \"Days\",     PARCAT1 = \"OVERALL\"   ) %>%   bind_rows(ADEX) ADEX <- ADEX %>%   filter(PARCAT1 == \"OVERALL\" &     PARAMCD %in% c(\"TDOSE\", \"TNDOSE\", \"TDURD\")) formatters::var_labels(ADEX) <- ADEX_labels  ADLB <- synthetic_cdisc_data(\"latest\")$adlb  ADEG <- synthetic_cdisc_data(\"latest\")$adeg  # For real data, ADVS needs some preprocessing like group different ANRIND and BNRIND into abnormal ADVS <- synthetic_cdisc_data(\"latest\")$advs %>%   mutate(ONTRTFL = ifelse(AVISIT %in% c(\"SCREENING\", \"BASELINE\"), \"\", \"Y\")) %>%   formatters::var_relabel(ONTRTFL = \"On Treatment Record Flag\") %>%   mutate(ANRIND = as.character(ANRIND), BNRIND = as.character(BNRIND)) %>%   mutate(     ANRIND = case_when(       ANRIND == \"HIGH HIGH\" ~ \"HIGH\",       ANRIND == \"LOW LOW\" ~ \"LOW\",       TRUE ~ ANRIND     ),     BNRIND = case_when(       BNRIND == \"HIGH HIGH\" ~ \"HIGH\",       BNRIND == \"LOW LOW\" ~ \"LOW\",       TRUE ~ BNRIND     )   )  ADCM <-   synthetic_cdisc_data(\"latest\")$adcm %>% mutate(CMSEQ = as.integer(CMSEQ))  # Add study-specific pre-processing: convert arm, param and visit variables to factors # Sample code: # ADSL$ACTARM <- factor(ADSL$ACTARM) # ADAE$AETOXGR <- factor(ADAE$AETOXGR) # ADLB <- ADLB %>% #   tern::df_explicit_na(omit_columns = setdiff(names(ADLB), c(\"PARAM\", \"PARAMCD\", \"AVISIT\") )) # ADEX <- ADEX %>% #   tern::df_explicit_na(omit_columns = setdiff(names(ADEX), c(\"PARAM\", \"PARAMCD\", \"PARCAT2\") ))  # define study-specific analysis subgroups and baskets from ADAE add_event_flags <- function(dat) {   dat %>%     dplyr::mutate(       TMPFL_SER = AESER == \"Y\",       TMPFL_REL = AEREL == \"Y\",       TMPFL_GR5 = AETOXGR == \"5\",       TMP_SMQ01 = !is.na(SMQ01NAM),       TMP_SMQ02 = !is.na(SMQ02NAM),       TMP_CQ01 = !is.na(CQ01NAM)     ) %>%     formatters::var_relabel(       TMPFL_SER = \"Serious AE\",       TMPFL_REL = \"Related AE\",       TMPFL_GR5 = \"Grade 5 AE\",       TMP_SMQ01 = aesi_label(dat$SMQ01NAM, dat$SMQ01SC),       TMP_SMQ02 = aesi_label(dat$SMQ02NAM, dat$SMQ02SC),       TMP_CQ01 = aesi_label(dat$CQ01NAM)     ) }  ADAE <- ADAE %>%   add_event_flags() # <code  ## Reusable Configuration For Modules arm_vars <- c(\"ACTARMCD\", \"ACTARM\")  demog_vars_adsl <-   names(ADSL)[!(names(ADSL) %in% c(\"USUBJID\", \"STUDYID\", date_vars_adsl))]  cs_arm_var <-   choices_selected(     choices = variable_choices(ADSL, subset = arm_vars),     selected = \"ACTARM\"   )  ae_anl_vars <- names(ADAE)[startsWith(names(ADAE), \"TMPFL_\")] # flag variables for AE baskets; set to NULL if not applicable to study aesi_vars <-   names(ADAE)[startsWith(names(ADAE), \"TMP_SMQ\") |     startsWith(names(ADAE), \"TMP_CQ\")]  ## Define code needed to produce the required data sets ADAE_code <- paste(   'ADAE <- synthetic_cdisc_data(\"latest\")$adae',   \"add_event_flags <- function(dat) {\",   \"  dat %>%\",   \"    dplyr::mutate(\",   '      TMPFL_SER = AESER == \"Y\",',   '      TMPFL_REL = AEREL == \"Y\",',   '      TMPFL_GR5 = AETOXGR == \"5\",',   \"      TMP_SMQ01 = !is.na(SMQ01NAM),\",   \"      TMP_SMQ02 = !is.na(SMQ02NAM),\",   \"      TMP_CQ01 = !is.na(CQ01NAM)\",   \"    ) %>%\",   \"    formatters::var_relabel(\",   '      TMPFL_SER = \"Serious AE\",',   '      TMPFL_REL = \"Related AE\",',   '      TMPFL_GR5 = \"Grade 5 AE\",',   \"      TMP_SMQ01 = aesi_label(dat$SMQ01NAM, dat$SMQ01SC),\",   \"      TMP_SMQ02 = aesi_label(dat$SMQ02NAM, dat$SMQ02SC),\",   \"      TMP_CQ01 = aesi_label(dat$CQ01NAM)\",   \"    )\",   \"}\",   \"ADAE <- ADAE %>%\",   \"  add_event_flags()\",   sep = \"\\n\",   collapse = \"\\n\" )  ADAETTE_code <-   paste(     'ADAETTE <- synthetic_cdisc_data(\"latest\")$adaette',     \"ADAETTE <- ADAETTE %>%\",     \"  mutate(is_event = case_when(\",     '    grepl(\"TOT\", .data$PARAMCD, fixed = TRUE) ~ TRUE,',     \"    TRUE ~ CNSR == 0\",     \"  )) %>%\",     \"  mutate(n_events = case_when(\",     '    grepl(\"TOT\", .data$PARAMCD, fixed = TRUE) ~ as.integer(.data$AVAL),',     \"    TRUE ~ as.integer(is_event)\",     \"  )) %>%\",     '  formatters::var_relabel(is_event = \"Is an Event\") %>%',     '  formatters::var_relabel(n_events = \"Number of Events\")',     \"ADAETTE_AE <-\",     '  filter(ADAETTE, grepl(\"TOT\", .data$PARAMCD, fixed = TRUE)) %>% select(-\"AVAL\")',     \"ADAETTE_OTH <-\",     '  filter(ADAETTE, !(grepl(\"TOT\", .data$PARAMCD, fixed = TRUE)))',     \"\",     \"ADAETTE_TTE <- ADAETTE %>%\",     '  filter(PARAMCD == \"AEREPTTE\") %>%',     \"  select(USUBJID, ARM, ARMCD, AVAL)\",     \"\",     \"ADAETTE_AE <-\",     '  full_join(ADAETTE_AE, ADAETTE_TTE, by = c(\"USUBJID\", \"ARM\", \"ARMCD\"))',     \"ADAETTE <- rbind(ADAETTE_AE, ADAETTE_OTH)\",     sep = \"\\n\",     collapse = \"\\n\"   )  ADEX_code <- paste(   'ADEX <- synthetic_cdisc_data(\"latest\")$adex',   \"ADEX_labels <- formatters::var_labels(ADEX, fill = FALSE)\",   'set.seed(1, kind = \"Mersenne-Twister\")',   \"ADEX <- ADEX %>%\",   \"  distinct(USUBJID, .keep_all = TRUE) %>%\",   \"  mutate(\",   '    PARAMCD = \"TDURD\",',   '    PARAM = \"Overall duration (days)\",',   \"    AVAL = sample(\",   \"      x = seq(1, 200),\",   \"      size = n(),\",   \"      replace = TRUE\",   \"    ),\",   '    AVALU = \"Days\",',   '    PARCAT1 = \"OVERALL\"',   \"  ) %>%\",   \"  bind_rows(ADEX)\",   \"ADEX <- ADEX %>%\",   '  filter(PARCAT1 == \"OVERALL\" &',   '    PARAMCD %in% c(\"TDOSE\", \"TNDOSE\", \"TDURD\"))',   \"formatters::var_labels(ADEX) <- ADEX_labels\",   sep = \"\\n\",   collapse = \"\\n\" )  ADVS_code <-   paste(     'ADVS <- synthetic_cdisc_data(\"latest\")$advs %>%',     '  mutate(ONTRTFL = ifelse(AVISIT %in% c(\"SCREENING\", \"BASELINE\"), \"\", \"Y\")) %>%',     '  formatters::var_relabel(ONTRTFL = \"On Treatment Record Flag\") %>%',     \"  mutate(ANRIND = as.character(ANRIND), BNRIND = as.character(BNRIND)) %>%\",     \"  mutate(\",     \"    ANRIND = case_when(\",     '      ANRIND == \"HIGH HIGH\" ~ \"HIGH\",',     '      ANRIND == \"LOW LOW\" ~ \"LOW\",',     \"      TRUE ~ ANRIND\",     \"    ),\",     \"    BNRIND = case_when(\",     '      BNRIND == \"HIGH HIGH\" ~ \"HIGH\",',     '      BNRIND == \"LOW LOW\" ~ \"LOW\",',     \"      TRUE ~ BNRIND\",     \"    )\",     \"  )\",     sep = \"\\n\",     collapse = \"\\n\"   )  ## Setup App app <- teal::init(   data = cdisc_data(     cdisc_dataset(       \"ADSL\",       ADSL,       code = 'ADSL <- synthetic_cdisc_data(\"latest\")$adsl',       vars = list(char_vars_adsl = char_vars_adsl)     ),     cdisc_dataset(\"ADAE\", ADAE, code = ADAE_code),     cdisc_dataset(\"ADAETTE\", ADAETTE, code = ADAETTE_code),     cdisc_dataset(\"ADEX\", ADEX, code = ADEX_code),     cdisc_dataset(\"ADLB\", ADLB, code = \"ADLB <- synthetic_cdisc_data(\\\"latest\\\")$adlb\"),     cdisc_dataset(\"ADEG\", ADEG, code = \"ADEG <- synthetic_cdisc_data(\\\"latest\\\")$adeg\"),     cdisc_dataset(\"ADVS\", ADVS, code = ADVS_code),     cdisc_dataset(\"ADCM\", ADCM, code = 'ADCM <- synthetic_cdisc_data(\"latest\")$adcm %>% mutate(CMSEQ = as.integer(CMSEQ))'),     # code = get_code(\"app.R\")),     check = TRUE   ),   modules = modules(     tm_front_page(       label = \"Study Information\",       header_text = c(\"Info about data source\" = \"Random data are used that have been created with the 'scda' R package\"),       tables = list(`NEST packages used` = data.frame(         Packages = c(           \"teal.modules.general\",           \"teal.modules.clinical\",           \"scda\",           \"scda.2022\"         )       ))     ),     tm_data_table(\"Data Table\"),     tm_variable_browser(\"Variable Browser\"),     tm_t_summary(       label = \"Demographic Table\",       dataname = \"ADSL\",       arm_var = cs_arm_var,       summarize_vars = choices_selected(         choices = variable_choices(ADSL, demog_vars_adsl),         selected = c(\"SEX\", \"AGE\", \"RACE\")       )     ),     modules(       label = \"Adverse Events\",       tm_t_events_summary(         label = \"AE Summary\",         dataname = \"ADAE\",         arm_var = cs_arm_var,         flag_var_anl = choices_selected(           choices = variable_choices(\"ADAE\", ae_anl_vars),           selected = ae_anl_vars,           keep_order = TRUE         ),         flag_var_aesi = choices_selected(           choices = variable_choices(\"ADAE\", aesi_vars),           selected = aesi_vars,           keep_order = TRUE         ),         add_total = TRUE       ),       tm_t_events(         label = \"AE by Term\",         dataname = \"ADAE\",         arm_var = cs_arm_var,         llt = choices_selected(           choices = variable_choices(ADAE, c(\"AETERM\", \"AEDECOD\")),           selected = c(\"AEDECOD\")         ),         hlt = choices_selected(           choices = variable_choices(ADAE, c(\"AEBODSYS\", \"AESOC\")),           selected = \"AEBODSYS\"         ),         add_total = TRUE,         event_type = \"adverse event\"       ),       tm_t_events_by_grade(         label = \"AE Table by Grade\",         dataname = \"ADAE\",         arm_var = cs_arm_var,         llt = choices_selected(           choices = variable_choices(ADAE, c(\"AEDECOD\")),           selected = c(\"AEDECOD\")         ),         hlt = choices_selected(           choices = variable_choices(ADAE, c(\"AEBODSYS\", \"AESOC\")),           selected = \"AEBODSYS\"         ),         grade = choices_selected(           choices = variable_choices(ADAE, c(\"AETOXGR\")),           selected = \"AETOXGR\"         ),         add_total = TRUE       ),       tm_t_events_patyear(         label = \"AE Rates Adjusted for Patient-Years at Risk\",         dataname = \"ADAETTE\",         arm_var = cs_arm_var,         paramcd = choices_selected(           choices = value_choices(ADAETTE, \"PARAMCD\", \"PARAM\"),           selected = \"AETTE1\"         ),         events_var = choices_selected(           choices = variable_choices(ADAETTE, \"n_events\"),           selected = \"n_events\",           fixed = TRUE         )       ),       tm_t_smq(         label = \"Adverse Events by SMQ Table\",         dataname = \"ADAE\",         arm_var = choices_selected(           choices = variable_choices(ADSL, subset = c(arm_vars, \"SEX\")),           selected = \"ACTARM\"         ),         add_total = FALSE,         baskets = choices_selected(           choices = variable_choices(ADAE, subset = grep(\"^(SMQ|CQ).*NAM$\", names(ADAE), value = TRUE)),           selected = grep(\"^(SMQ|CQ).*NAM$\", names(ADAE), value = TRUE)         ),         scopes = choices_selected(           choices = variable_choices(ADAE, subset = grep(\"^SMQ.*SC$\", names(ADAE), value = TRUE)),           selected = grep(\"^SMQ.*SC$\", names(ADAE), value = TRUE),           fixed = TRUE         ),         llt = choices_selected(           choices = variable_choices(ADAE, subset = c(\"AEDECOD\")),           selected = \"AEDECOD\"         )       )     ),     modules(       label = \"Lab Tables\",       tm_t_summary_by(         label = \"Labs Summary\",         dataname = \"ADLB\",         arm_var = cs_arm_var,         by_vars = choices_selected(           choices = variable_choices(ADLB, c(\"PARAM\", \"AVISIT\")),           selected = c(\"PARAM\", \"AVISIT\"),           fixed = TRUE         ),         summarize_vars = choices_selected(           choices = variable_choices(ADLB, c(\"AVAL\", \"CHG\")),           selected = c(\"AVAL\")         ),         paramcd = choices_selected(           choices = value_choices(ADLB, \"PARAMCD\", \"PARAM\"),           selected = \"ALT\"         )       ),       tm_t_shift_by_grade(         label = \"Grade Laboratory Abnormality Table\",         dataname = \"ADLB\",         arm_var = cs_arm_var,         paramcd = choices_selected(           choices = value_choices(ADLB, \"PARAMCD\", \"PARAM\"),           selected = \"ALT\"         ),         worst_flag_var = choices_selected(           choices = variable_choices(ADLB, subset = c(             \"WGRLOVFL\", \"WGRLOFL\", \"WGRHIVFL\", \"WGRHIFL\"           )),           selected = c(\"WGRLOVFL\")         ),         worst_flag_indicator = choices_selected(           value_choices(ADLB, \"WGRLOVFL\"),           selected = \"Y\",           fixed = TRUE         ),         anl_toxgrade_var = choices_selected(           choices = variable_choices(ADLB, subset = c(\"ATOXGR\")),           selected = c(\"ATOXGR\"),           fixed = TRUE         ),         base_toxgrade_var = choices_selected(           choices = variable_choices(ADLB, subset = c(\"BTOXGR\")),           selected = c(\"BTOXGR\"),           fixed = TRUE         ),         add_total = FALSE       ),       tm_t_abnormality_by_worst_grade(         label = \"Laboratory test results with highest grade post-baseline\",         dataname = \"ADLB\",         arm_var = choices_selected(           choices = variable_choices(ADSL, subset = c(\"ARM\", \"ARMCD\")),           selected = \"ARM\"         ),         paramcd = choices_selected(           choices = value_choices(ADLB, \"PARAMCD\", \"PARAM\"),           selected = c(\"ALT\", \"CRP\", \"IGA\")         ),         add_total = FALSE       )     ),     modules(       label = \"Exposure\",       tm_t_summary_by(         label = \"Exposure Summary\",         dataname = \"ADEX\",         arm_var = cs_arm_var,         by_vars = choices_selected(           choices = variable_choices(ADEX, c(\"PARCAT2\", \"PARAM\")),           selected = c(\"PARCAT2\", \"PARAM\"),           fixed = TRUE         ),         summarize_vars = choices_selected(           choices = variable_choices(ADEX, \"AVAL\"),           selected = c(\"AVAL\"),           fixed = TRUE         ),         paramcd = choices_selected(           choices = value_choices(ADEX, \"PARAMCD\", \"PARAM\"),           selected = \"TDOSE\"         ),         denominator = choices_selected(           choices = c(\"n\", \"N\", \"omit\"),           selected = \"n\"         )       ),       tm_t_exposure(         label = \"Duration of Exposure Table\",         dataname = \"ADEX\",         paramcd = choices_selected(           choices = value_choices(ADEX, \"PARAMCD\", \"PARAM\"),           selected = \"TDURD\",           fixed = TRUE         ),         col_by_var = choices_selected(           choices = variable_choices(ADEX, subset = c(arm_vars, \"SEX\")),           selected = \"SEX\"         ),         row_by_var = choices_selected(           choices = variable_choices(             ADEX,             subset = c(\"RACE\", \"REGION1\", \"STRATA1\", \"SEX\")           ),           selected = \"RACE\"         ),         parcat = choices_selected(           choices = value_choices(ADEX, \"PARCAT2\"),           selected = \"Drug A\"         ),         add_total = FALSE       )     ),     tm_t_abnormality(       label = \"Vital Signs Abnormality\",       dataname = \"ADVS\",       arm_var = cs_arm_var,       id_var = choices_selected(         choices = variable_choices(ADSL, subset = \"USUBJID\"),         selected = \"USUBJID\",         fixed = TRUE       ),       by_vars = choices_selected(         choices = variable_choices(ADVS, subset = c(\"PARAM\", \"AVISIT\")),         selected = c(\"PARAM\"),         keep_order = TRUE       ),       grade = choices_selected(         choices = variable_choices(ADVS, subset = \"ANRIND\"),         selected = \"ANRIND\",         fixed = TRUE       ),       abnormal = list(low = \"LOW\", high = \"HIGH\")     ),     tm_t_mult_events(       label = \"Concomitant Medication\",       dataname = \"ADCM\",       arm_var = cs_arm_var,       seq_var = choices_selected(\"CMSEQ\", selected = \"CMSEQ\", fixed = TRUE),       hlt = choices_selected(         choices = variable_choices(ADCM, c(           \"ATC1\", \"ATC2\", \"ATC3\", \"ATC4\"         )),         selected = \"ATC2\"       ),       llt = choices_selected(         choices = variable_choices(ADCM, c(\"CMDECOD\")),         selected = \"CMDECOD\",         fixed = TRUE       ),       add_total = TRUE,       event_type = \"treatment\"     ),     tm_t_shift_by_arm(       label = \"ECG Shift Table by Arm\",       dataname = \"ADEG\",       arm_var = cs_arm_var,       paramcd = choices_selected(value_choices(ADEG, \"PARAMCD\"),         selected = \"HR\"       ),       visit_var = choices_selected(value_choices(ADEG, \"AVISIT\"),         selected = \"POST-BASELINE MINIMUM\"       ),       aval_var = choices_selected(         variable_choices(ADEG, subset = \"ANRIND\"),         selected = \"ANRIND\",         fixed = TRUE       ),       base_var = choices_selected(         variable_choices(ADEG, subset = \"BNRIND\"),         selected = \"BNRIND\",         fixed = TRUE       )     ),     tm_g_lineplot(       label = \"Line Plot\",       dataname = \"ADLB\",       strata = cs_arm_var,       x = choices_selected(variable_choices(ADLB, \"AVISIT\"), \"AVISIT\", fixed = TRUE),       y = choices_selected(variable_choices(ADLB, c(         \"AVAL\", \"BASE\", \"CHG\", \"PCHG\"       )), \"AVAL\"),       y_unit = choices_selected(variable_choices(ADLB, \"AVALU\"), \"AVALU\", fixed = TRUE),       paramcd = choices_selected(variable_choices(ADLB, \"PARAMCD\"), \"PARAMCD\", fixed = TRUE),       param = choices_selected(value_choices(ADLB, \"PARAMCD\", \"PARAM\"), \"ALT\"),       plot_height = c(1000L, 200L, 4000L)     )   ),   header = div(     class = \"\",     style = \"margin-bottom: 2px;\",     tags$h1(       \"Example Safety App with teal.modules.clinical modules\",       tags$span(\"SPA\", class = \"pull-right\")     )   ),   footer = tags$p(class = \"text-muted\", \"Source: teal.gallery package\"),   # Set initial filter state as safety-evaluable population   filter = list(     ADSL = list(SAFFL = \"Y\"),     ADLB = list(AVAL = list()),     # default filter     ADEX = list(AVAL = list()),     # default filter     ADEG = list(AVAL = list()) # default filter   ) )  shinyApp(app$ui, app$server)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/articles/sources.html","id":"viewing-sources-on-your-workstation","dir":"Articles","previous_headings":"","what":"Viewing sources on your workstation","title":"Sample Apps Source Code","text":"view source code sample apps workstation, simply: Install teal.gallery package locally. Pick app whose source code want view list: View source sample running:","code":"teal.gallery::list_apps() ## [1] \"basic-teal\"      \"early-dev\"       \"efficacy\"        \"exploratory\"     ## [5] \"longitudinal\"    \"patient-profile\" \"python\"          \"RNA-seq\"         ## [9] \"safety\" teal.gallery::get_app_code(\"<app name>\")"},{"path":"https://insightsengineering.github.io/teal.gallery/main/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dony Unardi. Author, maintainer. Nikolas Burkoff. Author. F. Hoffmann-La Roche AG. Copyright holder, funder.","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Unardi D, Burkoff N (2023). teal.gallery: Sample shiny apps based teal framework. R package version 0.1.0.9000, https://github.com/insightsengineering/teal.gallery.","code":"@Manual{,   title = {teal.gallery: Sample shiny apps based on the teal framework},   author = {Dony Unardi and Nikolas Burkoff},   year = {2023},   note = {R package version 0.1.0.9000},   url = {https://github.com/insightsengineering/teal.gallery}, }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"tealgallery","dir":"","previous_headings":"","what":"Sample shiny apps based on the teal framework","title":"Sample shiny apps based on the teal framework","text":"gallery sample apps based Teal framework.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"installation","dir":"","previous_headings":"Usage","what":"Installation","title":"Sample shiny apps based on the teal framework","text":"’ve cloned repository locally, simply run following commands R session current working directory set base cloned repository. Feel free check branch ’ve cloned repository. Dependencies automatically installed steps provided .","code":"# Set your Github and Gitlab PATs # You might have already set these. If not, do so here. Sys.setenv(\"GITHUB_PAT\" = \"<token>\") Sys.setenv(\"GITLAB_PAT\" = \"<token>\")  # Install staged.dependencies remotes::install_github(   \"openpharma/staged.dependencies\",   upgrade = \"never\" )  # Set token mappings options(   staged.dependencies.token_mapping = c(     \"https://github.com\" = \"GITHUB_PAT\",     \"https://gitlab.com\" = \"GITLAB_PAT\"   ) )  # Install deps and this project staged.dependencies::install_deps(   staged.dependencies::dependency_table() )"},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"listing-apps","dir":"","previous_headings":"Usage","what":"Listing Apps","title":"Sample shiny apps based on the teal framework","text":"can list available apps running:","code":"teal.gallery::list_apps()"},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"running-an-app","dir":"","previous_headings":"Usage","what":"Running an app","title":"Sample shiny apps based on the teal framework","text":"Launch app running:","code":"# Say you want to run the `basic-teal` app teal.gallery::launch_app(\"basic-teal\")"},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"deployments","dir":"","previous_headings":"Usage","what":"Deployments","title":"Sample shiny apps based on the teal framework","text":"deploy specific app shinyapps.io internally hosted Posit Connect server, run: deploy apps package shinyapps.io internally hosted Posit Connect, run:","code":"# Assuming you want to deploy the basic-teal app teal.gallery:::deploy_app(   app_name = \"basic-teal\",   app_title = \"Basic Teal App - TEST\",   vanity_url = \"/NEST/basic-teal-test\",   api_key = \"SHINYAPPS_OR_POSIT_CONNECT_API_TOKEN\",   api_secret = \"SHINYAPPS_OR_POSIT_CONNECT_API_SECRET\" # N/A for Posit Connect ) teal.gallery:::deploy_all_apps(     api_key = \"SHINYAPPS_OR_POSIT_CONNECT_API_TOKEN\"     api_secret = \"SHINYAPPS_OR_POSIT_CONNECT_API_SECRET\" # N/A for Posit Connect )"},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"development","dir":"","previous_headings":"","what":"Development","title":"Sample shiny apps based on the teal framework","text":"teal sample apps wrapped package sake portability. development standards practices currently use R package development also apply repository.","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"adding-a-sample-app-to-tealgallery","dir":"","previous_headings":"Development","what":"Adding a sample app to teal.gallery","title":"Sample shiny apps based on the teal framework","text":"Adding sample app involves following steps: Copy sample app file named app.R sensible folder name inside inst/apps directory Update first test package list app names (.e. populate expected_apps vector new app name) Add package Suggests DESCRIPTION file dependencies explicitly used app.R sample app. , invoke renv::dependencies(\"path_to_file\")) see list dependencies. Update upstream dependencies staged_dependencies.yaml file package downstream dependencies packages added previous step.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.gallery/main/index.html","id":"main-development","dir":"","previous_headings":"Development > Links to teal apps on shinyapps.io","what":"Main (development)","title":"Sample shiny apps based on the teal framework","text":"RNA-seq basic-teal efficacy exploratory longitudinal early-dev patient-profile python safety","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_all_apps.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper to deploy all teal sample apps at once — deploy_all_apps","title":"Wrapper to deploy all teal sample apps at once — deploy_all_apps","text":"Deploys teal sample apps .","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_all_apps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper to deploy all teal sample apps at once — deploy_all_apps","text":"","code":"deploy_all_apps(   api_key,   api_secret = \"\",   server,   title_prefix = \"\",   title_suffix = format(Sys.Date(), format = \"%Y_%m_%d\"),   vanity_url_prefix = \"/NEST\",   create_manifest = FALSE )"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_all_apps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper to deploy all teal sample apps at once — deploy_all_apps","text":"api_key (character(1)) API key/token. api_secret (character(1)) deploying shinyapps.io account, token's secret. server (character(1)) URL accessing Posit Connect shinyapps.io server. title_prefix (character(1)) Prefix add app titles. title_suffix (character(1)) Suffix add app titles. vanity_url_prefix (character(1)) Prefix add apps' vanity URLs. create_manifest (logical(1)) Whether create manifest.json app.","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_all_apps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper to deploy all teal sample apps at once — deploy_all_apps","text":"","code":"if (FALSE) { teal.gallery::deploy_all_apps() }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Deploy an app from the gallery to any Posit Connect server — deploy_app","title":"Deploy an app from the gallery to any Posit Connect server — deploy_app","text":"lot flexibility configuring app options adhere certain set requirements","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deploy an app from the gallery to any Posit Connect server — deploy_app","text":"","code":"deploy_app(   app_name,   app_title,   api_key,   vanity_url,   server,   overwrite = TRUE,   api_secret = \"\",   create_manifest = TRUE )"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deploy an app from the gallery to any Posit Connect server — deploy_app","text":"app_name (character(1)) name teal app - technically, name app directory inst/. confuse name argument connectapi::deploy() . app_title (character(1), optional) title used content server. Unique app name deployed server generated app_title removing api_key (character(1)) API key/token. vanity_url (character(1)) path component URL app available. server (character(1)) URL accessing Posit Connect server. overwrite (logical(1)) whether remote app overwritten current deployment. api_secret (character(1)) deploying shinyapps.io account, token's secret. create_manifest (logical(1)) Whether create manifest.json app.","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/deploy_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Deploy an app from the gallery to any Posit Connect server — deploy_app","text":"","code":"if (FALSE) { teal.gallery::deploy_app(   app_name = \"basic-teal\",   app_title = \"Basic Teal App - TEST\",   vanity_url = \"/NEST/main/basic-teal\",   api_key = \"SHINYAPPS_OR_POSIT_CONNECT_API_TOKEN\",   overwrite = FALSE ) }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/get_app_code.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the source code of an app — get_app_code","title":"Get the source code of an app — get_app_code","text":"Get source code app","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/get_app_code.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the source code of an app — get_app_code","text":"","code":"get_app_code(app_name)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/get_app_code.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the source code of an app — get_app_code","text":"app_name character: name app. Run list_apps() see names apps gallery","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/get_app_code.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the source code of an app — get_app_code","text":"(character) code chosen app","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/get_app_code.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the source code of an app — get_app_code","text":"","code":"if (interactive()) {   get_app_code(\"basic-teal\")    # code can be saved into a file   code <- get_app_code(\"basic-teal\")   # writeLines(code, con = file(\"app.R\")) }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/launch_app.html","id":null,"dir":"Reference","previous_headings":"","what":"Run an app from the gallery — launch_app","title":"Run an app from the gallery — launch_app","text":"Run app gallery","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/launch_app.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run an app from the gallery — launch_app","text":"","code":"launch_app(app_name, ...)"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/launch_app.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run an app from the gallery — launch_app","text":"app_name character: name app. Run list_apps() see names apps gallery ... Additional arguments passed shiny::runApp()","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/launch_app.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Run an app from the gallery — launch_app","text":"package uses renv::dependencies() check dependencies app requires installed app load error list required packages run app","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/launch_app.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run an app from the gallery — launch_app","text":"","code":"if (FALSE) { launch_app(\"basic-teal\") }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/list_apps.html","id":null,"dir":"Reference","previous_headings":"","what":"List the teal apps in the gallery — list_apps","title":"List the teal apps in the gallery — list_apps","text":"List teal apps gallery","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/list_apps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the teal apps in the gallery — list_apps","text":"","code":"list_apps()"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/list_apps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the teal apps in the gallery — list_apps","text":"vector app names gallery","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/list_apps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List the teal apps in the gallery — list_apps","text":"","code":"if (interactive()) {   list_apps() }"},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/teal.gallery-package.html","id":null,"dir":"Reference","previous_headings":"","what":"teal.gallery Package — teal.gallery-package","title":"teal.gallery Package — teal.gallery-package","text":"teal.gallery gallery sample apps based Teal framework.","code":""},{"path":[]},{"path":"https://insightsengineering.github.io/teal.gallery/main/reference/teal.gallery-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"teal.gallery Package — teal.gallery-package","text":"Maintainer: Dony Unardi unardid@gene.com Authors: Nikolas Burkoff nikolas.burkoff@roche.com contributors: F. Hoffmann-La Roche AG [copyright holder, funder]","code":""},{"path":"https://insightsengineering.github.io/teal.gallery/main/news/index.html","id":"tealgallery-0109000","dir":"Changelog","previous_headings":"","what":"teal.gallery 0.1.0.9000","title":"teal.gallery 0.1.0.9000","text":"Initial release teal.gallery.","code":""}]
